# -*- coding: utf-8 -*-
"""Step 5/5 - Kolmogorov test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oBqMdO21khV6MOqgbFFyak-8LZru8fxW

# **File used**

**All Extracted Data**

**semua file di: Tugas Akhir -> Data -> Raw Data -> 3. Extracted_Data**


*------------------------------------------------------------------------------------------------------------------------------------------------------------------------*

# **Must Running**

----------------------------------------
"""

!pip install pandas scipy

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib.ticker as ticker
import matplotlib.ticker as mtick

from scipy.stats import ks_2samp
from matplotlib import font_manager as fm
from matplotlib.ticker import (MultipleLocator, AutoMinorLocator)

from google.colab import drive
drive.mount('/content/drive')

# Input font sendiri
custom_font = '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/File lain/Font/Poppins-Bold.ttf'
p_bold = fm.FontProperties(fname=custom_font)

custom_font2 = '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/File lain/Font/Poppins-Medium.ttf'
p_medium = fm.FontProperties(fname=custom_font2)

custom_font3 = '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/File lain/Font/Poppins-Regular.ttf'
p_regular = fm.FontProperties(fname=custom_font3)

custom_font4 = '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/File lain/Font/Poppins-SemiBold.ttf'
p_semibold = fm.FontProperties(fname=custom_font4)

"""# **Combine Files**

----------------------------------------
"""

files = {
    'DSS': {
        'file1': '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_DSS_WaterVap_all_1.xlsx',
        'file2': '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_DSS_WaterVap_all_2.xlsx',
        'file3': '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_DSS_WaterVap_all_3.xlsx'
    },
    'random_grid': {
        'file1': '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_grid_WaterVap_all_1.xlsx',
        'file2': '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_grid_WaterVap_all_2.xlsx',
        'file3': '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_grid_WaterVap_all_3.xlsx'
    },
    'random_uniform': {
        'file1': '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_uniform_WaterVap_all_1.xlsx',
        'file2': '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_uniform_WaterVap_all_2.xlsx',
        'file3': '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_uniform_WaterVap_all_3.xlsx'
    }
}

# Gabung berdasarkan kategori
def combine_files(category):
    df1 = pd.read_excel(files[category]['file1'])
    df2 = pd.read_excel(files[category]['file2'])
    df3 = pd.read_excel(files[category]['file3'])

    df1['Region'] = 1
    df2['Region'] = 2
    df3['Region'] = 3

    combined_df = pd.concat([df1, df2, df3], ignore_index=True)
    return combined_df

# Gabung per kategori
combined = combine_files('DSS')
combined_random_grid = combine_files('random_grid')
combined_random_uniform = combine_files('random_uniform')

# Save excel
combined.to_excel('/content/combined_WaterVap_all.xlsx', index=False)
combined_random_grid.to_excel('/content/combined_random_grid_WaterVap_all.xlsx', index=False)
combined_random_uniform.to_excel('/content/combined_random_uniform_WaterVap_all.xlsx', index=False)

print("Combined dataframes saved to Excel files.")

"""# **Kolmogorov Albedo**

----------------------------------------
"""

# Direktori File
file1 = '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a1. Percobaan 1/3. Extract_Data/File gabungan/combined_albedo_p1.xlsx'
file2 = '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a1. Percobaan 1/3. Extract_Data/File gabungan/combined_random_grid_albedo_p1.xlsx'
file3 = '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a1. Percobaan 1/3. Extract_Data/File gabungan/combined_random_uniform_albedo_p1.xlsx'

data1 = pd.read_excel(file1)
data2 = pd.read_excel(file2)
data3 = pd.read_excel(file3)

column_name = 'Extracted_Value' # Nama kolom

#_______________________________________________________________________________________________________________________________________#

# Toleransi nilai yang mau dihilangkan
values_to_remove = [0]
tolerance = 0

# Filter toleransi
def filter_values(data, values, tolerance):
    for value in values:
        data = data[(data < value - tolerance) | (data > value + tolerance)]
    return data

values1 = filter_values(data1[column_name].dropna().values, values_to_remove, tolerance)
values2 = filter_values(data2[column_name].dropna().values, values_to_remove, tolerance)
values3 = filter_values(data3[column_name].dropna().values, values_to_remove, tolerance)

#_______________________________________________________________________________________________________________________________________#

# K-S Test
ks_stat1, p_value1 = ks_2samp(values1, values2)  # DSS vs Random Grid
ks_stat2, p_value2 = ks_2samp(values1, values3)  # DSS vs Random Uniform
ks_stat3, p_value3 = ks_2samp(values2, values3)  # Random Grid vs Random Uniform

#_______________________________________________________________________________________________________________________________________#

# ECDF
def ecdf(data):
    n = len(data)
    x = np.sort(data)
    y = np.arange(1, n+1) / n
    return x, y

x1, y1 = ecdf(values1)
x2, y2 = ecdf(values2)
x3, y3 = ecdf(values3)

#_______________________________________________________________________________________________________________________________________#

# Plot
#sns.set(style="whitegrid")
plt.figure(figsize=(10, 6))

#_______________________________________________________________________________________________________________________________________#

# Plot ECDF
plt.step(x1, y1, where='post', label='Data Albedo Koordinat DSS Asli', color='blue')
plt.step(x2, y2, where='post', label='Data Albedo Random Grid Method', color='red')
plt.step(x3, y3, where='post', label='Data Albedo Random Uniform Method', color='green')

# Kalkulasi DMax
d_max_1_2 = np.max(np.abs(y1 - np.interp(x1, x2, y2)))
d_max_1_3 = np.max(np.abs(y1 - np.interp(x1, x3, y3)))
d_max_2_3 = np.max(np.abs(y2 - np.interp(x2, x3, y3)))

# Nilai x di DMax
d_max_x_1_2 = x1[np.argmax(np.abs(y1 - np.interp(x1, x2, y2)))]
d_max_x_1_3 = x1[np.argmax(np.abs(y1 - np.interp(x1, x3, y3)))]
d_max_x_2_3 = x2[np.argmax(np.abs(y2 - np.interp(x2, x3, y3)))]

#_______________________________________________________________________________________________________________________________________#

_, ymin = plt.gca().get_ylim()
text_y_position = ymin - 0.02

# Plot garis DMax
plt.axvline(x=d_max_x_1_2, color='gray', linestyle='--', linewidth=1,
            label=f'\nDSS - Random Grid \nD-max:  {d_max_1_2:.5f}\nP-value: {p_value1:.5e}'.replace('.', ','))
plt.text(d_max_x_1_2, text_y_position, f'DSS - RG', color='gray', rotation=90, ha='right', va='top')

plt.axvline(x=d_max_x_1_3, color='black', linestyle='--', linewidth=1,
            label=f'DSS - Random Uniform \nD-max:  {d_max_1_3:.5f}\nP-value: {p_value2:.5e}'.replace('.', ','))
plt.text(d_max_x_1_3, text_y_position, f'DSS - RU', color='black', rotation=90, ha='right', va='top')

plt.axvline(x=d_max_x_2_3, color='purple', linestyle='--', linewidth=1,
            label=f'Random Grid - Random Uniform \nD-max:  {d_max_2_3:.5f}\nP-value: {p_value3:.5e}'.replace('.', ','))
plt.text(d_max_x_2_3, text_y_position, f'RG - RU', color='purple', rotation=90, ha='right', va='top')


#_______________________________________________________________________________________________________________________________________#

# Plot
plt.suptitle('Tes Kolmogorov-Smirnov Albedo', fontproperties=p_bold, fontsize=15, color="#44494a", x=0.303)
plt.title('ECDF / DSS Asli vs Kedua Metode Random (Grid & Uniform)', fontproperties=p_medium, fontsize=12, color="#44494a", y=1.02, loc="left")
plt.xlabel('Nilai pada tiap koordinat', fontproperties=p_medium, fontsize=12, color="#44494a")
plt.ylabel('ECDF', fontproperties=p_medium, fontsize=12, color="#44494a")

#_______________________________________________________________________________________________________________________________________#

# Ubah titik ke koma
def indonesian_format(x, pos=None):
    return f"{x:,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def indonesian_format_2(x, pos=None):
    return f"{x:,.1f}".replace(',', 'X').replace('.', ',').replace('X', '.')

plt.gca().xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
plt.gca().yaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format_2))

ax = plt.gca()
ax.xaxis.set_minor_locator(AutoMinorLocator(4))
ax.yaxis.set_minor_locator(AutoMinorLocator(4))

plt.tick_params(axis='x', which='minor', length=4, color='black')
plt.tick_params(axis='y', which='minor', length=4, color='black')

#_______________________________________________________________________________________________________________________________________#

# Plot legend
handles, labels = plt.gca().get_legend_handles_labels()
new_labels = [label.replace('.', ',') for label in labels]
new_labels.append('\nnilai Î± = 0,1')
handles.append(plt.Line2D([0], [0], color='none', linestyle='None'))
plt.legend(handles, new_labels, loc='best', frameon=True)

#_______________________________________________________________________________________________________________________________________#

plt.grid(True)
plt.savefig(f'albedo K-S.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

# Print distribusi
print("\n")
print("Distribusi Data Albedo Koordinat DSS Asli (value1):")
print(f"Jumlah: {len(values1)}")
print(f"Mean: {np.mean(values1):.4f}")
print(f"Std: {np.std(values1):.4f}")
print(f"Min: {np.min(values1):.4f}")
print(f"Max: {np.max(values1):.4f}")
print()

print("Distribusi Data Albedo Random Grid Method (value2):")
print(f"Jumlah: {len(values2)}")
print(f"Mean: {np.mean(values2):.4f}")
print(f"Std: {np.std(values2):.4f}")
print(f"Min: {np.min(values2):.4f}")
print(f"Max: {np.max(values2):.4f}")
print()

print("Distribusi Data Albedo Random Uniform Method (value3):")
print(f"Jumlah: {len(values3)}")
print(f"Mean: {np.mean(values3):.4f}")
print(f"Std: {np.std(values3):.4f}")
print(f"Min: {np.min(values3):.4f}")
print(f"Max: {np.max(values3):.4f}")
print()

"""# **Kolmogorov DCI**

----------------------------------------
"""

# Direktori File
file1 = '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a1. Percobaan 1/3. Extract_Data/File gabungan/combined_DCI_p1.xlsx'
file2 = '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a1. Percobaan 1/3. Extract_Data/File gabungan/combined_random_grid_DCI_p1.xlsx'
file3 = '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a1. Percobaan 1/3. Extract_Data/File gabungan/combined_random_uniform_DCI_p1.xlsx'

data1 = pd.read_excel(file1)
data2 = pd.read_excel(file2)
data3 = pd.read_excel(file3)

column_name = 'Extracted_Value' # Nama kolom

#_______________________________________________________________________________________________________________________________________#

# Toleransi nilai yang mau dihilangkan
values_to_remove = [255]
tolerance = 1

# Filter toleransi
def filter_values(data, values, tolerance):
    for value in values:
        data = data[(data < value - tolerance) | (data > value + tolerance)]
    return data

values1 = filter_values(data1[column_name].dropna().values, values_to_remove, tolerance)
values2 = filter_values(data2[column_name].dropna().values, values_to_remove, tolerance)
values3 = filter_values(data3[column_name].dropna().values, values_to_remove, tolerance)

#_______________________________________________________________________________________________________________________________________#

# K-S Test
ks_stat1, p_value1 = ks_2samp(values1, values2)  # DSS vs Random Grid
ks_stat2, p_value2 = ks_2samp(values1, values3)  # DSS vs Random Uniform
ks_stat3, p_value3 = ks_2samp(values2, values3)  # Random Grid vs Random Uniform

#_______________________________________________________________________________________________________________________________________#

# ECDF
def ecdf(data):
    n = len(data)
    x = np.sort(data)
    y = np.arange(1, n+1) / n
    return x, y

x1, y1 = ecdf(values1)
x2, y2 = ecdf(values2)
x3, y3 = ecdf(values3)

#_______________________________________________________________________________________________________________________________________#

# Plot
#sns.set(style="whitegrid")
plt.figure(figsize=(10, 6))

#_______________________________________________________________________________________________________________________________________#

# Plot ECDF
plt.step(x1, y1, where='post', label='Data DCI Koordinat DSS Asli', color='blue')
plt.step(x2, y2, where='post', label='Data DCI Random Grid Method', color='red')
plt.step(x3, y3, where='post', label='Data DCI Random Uniform Method', color='green')

# Kalkulasi DMax
d_max_1_2 = np.max(np.abs(y1 - np.interp(x1, x2, y2)))
d_max_1_3 = np.max(np.abs(y1 - np.interp(x1, x3, y3)))
d_max_2_3 = np.max(np.abs(y2 - np.interp(x2, x3, y3)))

# Nilai x di DMax
d_max_x_1_2 = x1[np.argmax(np.abs(y1 - np.interp(x1, x2, y2)))]
d_max_x_1_3 = x1[np.argmax(np.abs(y1 - np.interp(x1, x3, y3)))]
d_max_x_2_3 = x2[np.argmax(np.abs(y2 - np.interp(x2, x3, y3)))]

#_______________________________________________________________________________________________________________________________________#

ymin, _ = plt.gca().get_ylim()
text_y_position = ymin + 0.03
text_y_position2 = ymin + 0.22

# Plot garis DMax
plt.axvline(x=d_max_x_1_2, color='gray', linestyle='--', linewidth=1,
            label=f'\nDSS - Random Grid \nD-max:  {d_max_1_2:.5f}\nP-value: {p_value1:.5f}'.replace('.', ','))
plt.text(d_max_x_1_2, text_y_position2, f'DSS - RG', color='gray', rotation=90, ha='right', va='baseline')

plt.axvline(x=d_max_x_1_3, color='black', linestyle='--', linewidth=1,
            label=f'DSS - Random Uniform \nD-max:  {d_max_1_3:.5f}\nP-value: {p_value2:.5f}'.replace('.', ','))
plt.text(d_max_x_1_3, text_y_position, f'DSS - RU', color='black', rotation=-90, ha='left', va='baseline')

plt.axvline(x=d_max_x_2_3, color='purple', linestyle='--', linewidth=1,
            label=f'Random Grid - Random Uniform \nD-max:  {d_max_2_3:.5f}\nP-value: {p_value3:.5f}'.replace('.', ','))
plt.text(d_max_x_2_3, text_y_position, f'RG - RU', color='purple', rotation=90, ha='right', va='baseline')


#_______________________________________________________________________________________________________________________________________#

# Plot
plt.suptitle('Tes Kolmogorov-Smirnov Dust Cover Index (DCI)', fontproperties=p_bold, fontsize=15, color="#44494a", x=0.385)
plt.title('ECDF / DSS Asli vs Kedua Metode Random (Grid & Uniform) ', fontproperties=p_medium, fontsize=12, color="#44494a", y=1.02, loc="left")
plt.xlabel('Nilai pada tiap koordinat', fontproperties=p_medium, fontsize=12, color="#44494a")
plt.ylabel('ECDF', fontproperties=p_medium, fontsize=12, color="#44494a")

#_______________________________________________________________________________________________________________________________________#

# Ubah titik ke koma
def indonesian_format(x, pos=None):
    return f"{x:,.0f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def indonesian_format_2(x, pos=None):
    return f"{x:,.1f}".replace(',', 'X').replace('.', ',').replace('X', '.')

plt.gca().xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
plt.gca().yaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format_2))

ax = plt.gca()
ax.xaxis.set_minor_locator(AutoMinorLocator(4))
ax.yaxis.set_minor_locator(AutoMinorLocator(4))

plt.tick_params(axis='x', which='minor', length=4, color='black')
plt.tick_params(axis='y', which='minor', length=4, color='black')

#_______________________________________________________________________________________________________________________________________#

# Plot legend
handles, labels = plt.gca().get_legend_handles_labels()
new_labels = [label.replace('.', ',') for label in labels]
new_labels.append('\nnilai Î± = 0,1')
handles.append(plt.Line2D([0], [0], color='none', linestyle='None'))
plt.legend(handles, new_labels, loc='upper left', frameon=True)

#_______________________________________________________________________________________________________________________________________#

plt.xlim(0, 300)
plt.grid(True)
plt.savefig(f'DCI K-S.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

# Print distribusi

print(f"P-value 1-2: {np.max(p_value1)}")
print(f"P-value 1-3: {np.max(p_value2)}")
print(f"P-value 2-3: {np.max(p_value3)}")

print("\n")
print("Distribusi Data DCI Koordinat DSS Asli (value1):")
print(f"Jumlah: {len(values1)}")
print(f"Mean: {np.mean(values1):.4f}")
print(f"Std: {np.std(values1):.4f}")
print(f"Min: {np.min(values1):.4f}")
print(f"Max: {np.max(values1):.4f}")
print()

print("Distribusi Data DCI Random Grid Method (value2):")
print(f"Jumlah: {len(values2)}")
print(f"Mean: {np.mean(values2):.4f}")
print(f"Std: {np.std(values2):.4f}")
print(f"Min: {np.min(values2):.4f}")
print(f"Max: {np.max(values2):.4f}")
print()

print("Distribusi Data DCI Random Uniform Method (value3):")
print(f"Jumlah: {len(values3)}")
print(f"Mean: {np.mean(values3):.4f}")
print(f"Std: {np.std(values3):.4f}")
print(f"Min: {np.min(values3):.4f}")
print(f"Max: {np.max(values3):.4f}")
print()



"""# **Kolmogorov Water Vapour**"""

# Direktori File
file1 = '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a1. Percobaan 1/3. Extract_Data/File gabungan/combined_WaterVap_p1.xlsx'
file2 = '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a1. Percobaan 1/3. Extract_Data/File gabungan/combined_random_grid_WaterVap_p1.xlsx'
file3 = '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a1. Percobaan 1/3. Extract_Data/File gabungan/combined_random_uniform_WaterVap_p1.xlsx'

data1 = pd.read_excel(file1)
data2 = pd.read_excel(file2)
data3 = pd.read_excel(file3)

column_name = 'extracted_value' # Nama kolom

#_______________________________________________________________________________________________________________________________________#

# Toleransi nilai yang mau dihilangkan
values_to_remove = [152]
tolerance = 0.0001

# Filter toleransi
def filter_values(data, values, tolerance):
    for value in values:
        data = data[(data < value - tolerance) | (data > value + tolerance)]
    return data

values1 = filter_values(data1[column_name].dropna().values, values_to_remove, tolerance)
values2 = filter_values(data2[column_name].dropna().values, values_to_remove, tolerance)
values3 = filter_values(data3[column_name].dropna().values, values_to_remove, tolerance)

#_______________________________________________________________________________________________________________________________________#

# K-S Test
ks_stat1, p_value1 = ks_2samp(values1, values2)  # DSS vs Random Grid
ks_stat2, p_value2 = ks_2samp(values1, values3)  # DSS vs Random Uniform
ks_stat3, p_value3 = ks_2samp(values2, values3)  # Random Grid vs Random Uniform

#_______________________________________________________________________________________________________________________________________#

# ECDF
def ecdf(data):
    n = len(data)
    x = np.sort(data)
    y = np.arange(1, n+1) / n
    return x, y

x1, y1 = ecdf(values1)
x2, y2 = ecdf(values2)
x3, y3 = ecdf(values3)

#_______________________________________________________________________________________________________________________________________#

# Plot
#sns.set(style="whitegrid")
plt.figure(figsize=(10, 6))

#_______________________________________________________________________________________________________________________________________#

# Plot ECDF
plt.step(x1, y1, where='post', label='Data WV Koordinat DSS Asli', color='blue')
plt.step(x2, y2, where='post', label='Data WV Random Grid Method', color='red')
plt.step(x3, y3, where='post', label='Data WV Random Uniform Method', color='green')

# Kalkulasi DMax
d_max_1_2 = np.max(np.abs(y1 - np.interp(x1, x2, y2)))
d_max_1_3 = np.max(np.abs(y1 - np.interp(x1, x3, y3)))
d_max_2_3 = np.max(np.abs(y2 - np.interp(x2, x3, y3)))

# Nilai x di DMax
d_max_x_1_2 = x1[np.argmax(np.abs(y1 - np.interp(x1, x2, y2)))]
d_max_x_1_3 = x1[np.argmax(np.abs(y1 - np.interp(x1, x3, y3)))]
d_max_x_2_3 = x2[np.argmax(np.abs(y2 - np.interp(x2, x3, y3)))]

#_______________________________________________________________________________________________________________________________________#

_, ymin = plt.gca().get_ylim()
text_y_position = ymin - 0.02

# Plot garis DMax
plt.axvline(x=d_max_x_1_2, color='gray', linestyle='--', linewidth=1,
            label=f'\nDSS - Random Grid \nD-max:  {d_max_1_2:.5f}\nP-value: {p_value1:.5e}'.replace('.', ','))
plt.text(d_max_x_1_2, text_y_position, f'DSS - RG', color='gray', rotation=90, ha='right', va='top')

plt.axvline(x=d_max_x_1_3, color='black', linestyle='--', linewidth=1,
            label=f'DSS - Random Uniform \nD-max:  {d_max_1_3:.5f}\nP-value: {p_value2:.5e}'.replace('.', ','))
plt.text(d_max_x_1_3, text_y_position, f'DSS - RU', color='black', rotation=-90, ha='left', va='top')

plt.axvline(x=d_max_x_2_3, color='purple', linestyle='--', linewidth=1,
            label=f'Random Grid - Random Uniform \nD-max:  {d_max_2_3:.5f}\nP-value: {p_value3:.5e}'.replace('.', ','))
plt.text(d_max_x_2_3, text_y_position, f'RG - RU', color='purple', rotation=90, ha='right', va='top')


#_______________________________________________________________________________________________________________________________________#

# Plot
plt.suptitle('Tes Kolmogorov-Smirnov Water Vapour (WV) saat MY 24 - MY 25', fontproperties=p_bold, fontsize=15, color="#44494a", x=0.471)
plt.title('ECDF / DSS Asli vs Kedua Metode Random (Grid & Uniform) ', fontproperties=p_medium, fontsize=12, color="#44494a", y=1.02, loc="left")
plt.xlabel('Nilai pada tiap koordinat', fontproperties=p_medium, fontsize=12, color="#44494a")
plt.ylabel('ECDF', fontproperties=p_medium, fontsize=12, color="#44494a")

#_______________________________________________________________________________________________________________________________________#

# Ubah titik ke koma
def indonesian_format(x, pos=None):
    return f"{x:,.4f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def indonesian_format_2(x, pos=None):
    return f"{x:,.1f}".replace(',', 'X').replace('.', ',').replace('X', '.')

plt.gca().xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
plt.gca().yaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format_2))

ax = plt.gca()
ax.xaxis.set_minor_locator(AutoMinorLocator(4))
ax.yaxis.set_minor_locator(AutoMinorLocator(4))

plt.tick_params(axis='x', which='minor', length=4, color='black')
plt.tick_params(axis='y', which='minor', length=4, color='black')

#_______________________________________________________________________________________________________________________________________#

# Plot legend
handles, labels = plt.gca().get_legend_handles_labels()
new_labels = [label.replace('.', ',') for label in labels]
new_labels.append('\nnilai Î± = 0,1')
handles.append(plt.Line2D([0], [0], color='none', linestyle='None'))
plt.legend(handles, new_labels, loc='upper left', frameon=True)

#_______________________________________________________________________________________________________________________________________#

plt.xlim(0.0050, 0.0250)
plt.grid(True)
plt.savefig(f'WV K-S.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

# Print distribusi
print("\n")
print("Distribusi Data WV Koordinat DSS Asli (value1):")
print(f"Jumlah: {len(values1)}")
print(f"Mean: {np.mean(values1):.4f}")
print(f"Std: {np.std(values1):.4f}")
print(f"Min: {np.min(values1):.4f}")
print(f"Max: {np.max(values1):.4f}")
print()

print("Distribusi Data WV Random Grid Method (value2):")
print(f"Jumlah: {len(values2)}")
print(f"Mean: {np.mean(values2):.4f}")
print(f"Std: {np.std(values2):.4f}")
print(f"Min: {np.min(values2):.4f}")
print(f"Max: {np.max(values2):.4f}")
print()

print("Distribusi Data WV Random Uniform Method (value3):")
print(f"Jumlah: {len(values3)}")
print(f"Mean: {np.mean(values3):.4f}")
print(f"Std: {np.std(values3):.4f}")
print(f"Min: {np.min(values3):.4f}")
print(f"Max: {np.max(values3):.4f}")
print()

"""# **Kolmogorov Slope**

----------------------------------------
"""

# Direktori File
file1 = '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a1. Percobaan 1/3. Extract_Data/File gabungan/combined_slope_p1.xlsx'
file2 = '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a1. Percobaan 1/3. Extract_Data/File gabungan/combined_random_grid_slope_p1.xlsx'
file3 = '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a1. Percobaan 1/3. Extract_Data/File gabungan/combined_random_uniform_slope_p1.xlsx'

data1 = pd.read_excel(file1)
data2 = pd.read_excel(file2)
data3 = pd.read_excel(file3)

column_name = 'Extracted_Value' # Nama kolom

#_______________________________________________________________________________________________________________________________________#

# Toleransi nilai yang mau dihilangkan
values_to_remove = [152]
tolerance = 0.0001

# Filter toleransi
def filter_values(data, values, tolerance):
    for value in values:
        data = data[(data < value - tolerance) | (data > value + tolerance)]
    return data

values1 = filter_values(data1[column_name].dropna().values, values_to_remove, tolerance)
values2 = filter_values(data2[column_name].dropna().values, values_to_remove, tolerance)
values3 = filter_values(data3[column_name].dropna().values, values_to_remove, tolerance)

#_______________________________________________________________________________________________________________________________________#

# K-S Test
ks_stat1, p_value1 = ks_2samp(values1, values2)  # DSS vs Random Grid
ks_stat2, p_value2 = ks_2samp(values1, values3)  # DSS vs Random Uniform
ks_stat3, p_value3 = ks_2samp(values2, values3)  # Random Grid vs Random Uniform

#_______________________________________________________________________________________________________________________________________#

# ECDF
def ecdf(data):
    n = len(data)
    x = np.sort(data)
    y = np.arange(1, n+1) / n
    return x, y

x1, y1 = ecdf(values1)
x2, y2 = ecdf(values2)
x3, y3 = ecdf(values3)

#_______________________________________________________________________________________________________________________________________#

# Plot
#sns.set(style="whitegrid")
plt.figure(figsize=(10, 6))

#_______________________________________________________________________________________________________________________________________#

# Plot ECDF
plt.step(x1, y1, where='post', label='Data Slope Koordinat DSS Asli', color='blue')
plt.step(x2, y2, where='post', label='Data Slope Random Grid Method', color='red')
plt.step(x3, y3, where='post', label='Data Slope Random Uniform Method', color='green')

# Kalkulasi DMax
d_max_1_2 = np.max(np.abs(y1 - np.interp(x1, x2, y2)))
d_max_1_3 = np.max(np.abs(y1 - np.interp(x1, x3, y3)))
d_max_2_3 = np.max(np.abs(y2 - np.interp(x2, x3, y3)))

# Nilai x di DMax
d_max_x_1_2 = x1[np.argmax(np.abs(y1 - np.interp(x1, x2, y2)))]
d_max_x_1_3 = x1[np.argmax(np.abs(y1 - np.interp(x1, x3, y3)))]
d_max_x_2_3 = x2[np.argmax(np.abs(y2 - np.interp(x2, x3, y3)))]

#_______________________________________________________________________________________________________________________________________#

ymin, _ = plt.gca().get_ylim()
text_y_position = ymin + 0.03

# Plot garis DMax
plt.axvline(x=d_max_x_1_2, color='gray', linestyle='--', linewidth=1,
            label=f'\nDSS - Random Grid \nD-max:  {d_max_1_2:.5f}\nP-value: {p_value1:.5f}'.replace('.', ','))
plt.text(d_max_x_1_2, text_y_position, f'DSS - RG', color='gray', rotation=90, ha='right', va='bottom')

plt.axvline(x=d_max_x_1_3, color='black', linestyle='--', linewidth=1,
            label=f'DSS - Random Uniform \nD-max:  {d_max_1_3:.5f}\nP-value: {p_value2:.5f}'.replace('.', ','))
plt.text(d_max_x_1_3, text_y_position, f'DSS - RU', color='black', rotation=90, ha='right', va='bottom')

plt.axvline(x=d_max_x_2_3, color='purple', linestyle='--', linewidth=1,
            label=f'Random Grid - Random Uniform \nD-max:  {d_max_2_3:.5f}\nP-value: {p_value3:.5f}'.replace('.', ','))
plt.text(d_max_x_2_3, text_y_position, f'RG - RU', color='purple', rotation=90, ha='right', va='bottom')


#_______________________________________________________________________________________________________________________________________#

# Plot
plt.suptitle('Tes Kolmogorov-Smirnov Slope', fontproperties=p_bold, fontsize=15, color="#44494a", x=0.295)
plt.title('ECDF / DSS Asli vs Kedua Metode Random (Grid & Uniform) ', fontproperties=p_medium, fontsize=12, color="#44494a", y=1.02, loc="left")
plt.xlabel('Nilai pada tiap koordinat', fontproperties=p_medium, fontsize=12, color="#44494a")
plt.ylabel('ECDF', fontproperties=p_medium, fontsize=12, color="#44494a")

#_______________________________________________________________________________________________________________________________________#

# Ubah titik ke koma
def indonesian_format(x, pos=None):
    return f"{x:,.0f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def indonesian_format_2(x, pos=None):
    return f"{x:,.1f}".replace(',', 'X').replace('.', ',').replace('X', '.')

plt.gca().xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
plt.gca().yaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format_2))

ax = plt.gca()
ax.xaxis.set_minor_locator(AutoMinorLocator(4))
ax.yaxis.set_minor_locator(AutoMinorLocator(4))

plt.tick_params(axis='x', which='minor', length=4, color='black')
plt.tick_params(axis='y', which='minor', length=4, color='black')

#_______________________________________________________________________________________________________________________________________#

# Plot legend
handles, labels = plt.gca().get_legend_handles_labels()
new_labels = [label.replace('.', ',') for label in labels]
new_labels.append('\nnilai Î± = 0,1')
handles.append(plt.Line2D([0], [0], color='none', linestyle='None'))
plt.legend(handles, new_labels, loc='best', frameon=True)

#_______________________________________________________________________________________________________________________________________#

plt.xlim(0, 10)
plt.grid(True)
plt.savefig(f'slope K-S.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

# Print distribusi
print("\n")
print("Distribusi Data Slope Koordinat DSS Asli (value1):")
print(f"Jumlah: {len(values1)}")
print(f"Mean: {np.mean(values1):.4f}")
print(f"Std: {np.std(values1):.4f}")
print(f"Min: {np.min(values1):.4f}")
print(f"Max: {np.max(values1):.4f}")
print()

print("Distribusi Data Slope Random Grid Method (value2):")
print(f"Jumlah: {len(values2)}")
print(f"Mean: {np.mean(values2):.4f}")
print(f"Std: {np.std(values2):.4f}")
print(f"Min: {np.min(values2):.4f}")
print(f"Max: {np.max(values2):.4f}")
print()

print("Distribusi Data Slope Random Uniform Method (value3):")
print(f"Jumlah: {len(values3)}")
print(f"Mean: {np.mean(values3):.4f}")
print(f"Std: {np.std(values3):.4f}")
print(f"Min: {np.min(values3):.4f}")
print(f"Max: {np.max(values3):.4f}")
print()

"""# **Kolmogorov Thermal Inertia**

----------------------------------------

## **Night**
"""

# Direktori File
file1 = '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a1. Percobaan 1/3. Extract_Data/File gabungan/combined_TI_night_p1.xlsx'
file2 = '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a1. Percobaan 1/3. Extract_Data/File gabungan/combined_random_grid_TI_night_p1.xlsx'
file3 = '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a1. Percobaan 1/3. Extract_Data/File gabungan/combined_random_uniform_TI_night_p1.xlsx'

data1 = pd.read_excel(file1)
data2 = pd.read_excel(file2)
data3 = pd.read_excel(file3)

column_name = 'Value' # Nama kolom

#_______________________________________________________________________________________________________________________________________#

# Toleransi nilai yang mau dihilangkan
values_to_remove = [0]
tolerance = 0

# Filter toleransi
def filter_values(data, values, tolerance):
    for value in values:
        data = data[(data < value - tolerance) | (data > value + tolerance)]
    return data

values1 = filter_values(data1[column_name].dropna().values, values_to_remove, tolerance)
values2 = filter_values(data2[column_name].dropna().values, values_to_remove, tolerance)
values3 = filter_values(data3[column_name].dropna().values, values_to_remove, tolerance)

#_______________________________________________________________________________________________________________________________________#

# K-S Test
ks_stat1, p_value1 = ks_2samp(values1, values2)  # DSS vs Random Grid
ks_stat2, p_value2 = ks_2samp(values1, values3)  # DSS vs Random Uniform
ks_stat3, p_value3 = ks_2samp(values2, values3)  # Random Grid vs Random Uniform

#_______________________________________________________________________________________________________________________________________#

# ECDF
def ecdf(data):
    n = len(data)
    x = np.sort(data)
    y = np.arange(1, n+1) / n
    return x, y

x1, y1 = ecdf(values1)
x2, y2 = ecdf(values2)
x3, y3 = ecdf(values3)

#_______________________________________________________________________________________________________________________________________#

# Plot
#sns.set(style="whitegrid")
plt.figure(figsize=(10, 6))

#_______________________________________________________________________________________________________________________________________#

# Plot ECDF
plt.step(x1, y1, where='post', label='Data TI Koordinat DSS Asli', color='blue')
plt.step(x2, y2, where='post', label='Data TI Random Grid Method', color='red')
plt.step(x3, y3, where='post', label='Data TI Random Uniform Method', color='green')

# Kalkulasi DMax
d_max_1_2 = np.max(np.abs(y1 - np.interp(x1, x2, y2)))
d_max_1_3 = np.max(np.abs(y1 - np.interp(x1, x3, y3)))
d_max_2_3 = np.max(np.abs(y2 - np.interp(x2, x3, y3)))

# Nilai x di DMax
d_max_x_1_2 = x1[np.argmax(np.abs(y1 - np.interp(x1, x2, y2)))]
d_max_x_1_3 = x1[np.argmax(np.abs(y1 - np.interp(x1, x3, y3)))]
d_max_x_2_3 = x2[np.argmax(np.abs(y2 - np.interp(x2, x3, y3)))]

#_______________________________________________________________________________________________________________________________________#

_, ymin = plt.gca().get_ylim()
text_y_position = ymin - 0.02

# Plot garis DMax
plt.axvline(x=d_max_x_1_2, color='gray', linestyle='--', linewidth=1,
            label=f'\nDSS - Random Grid \nD-max:  {d_max_1_2:.5f}\nP-value: {p_value1:.5f}'.replace('.', ','))
plt.text(d_max_x_1_2, text_y_position, f'DSS - RG', color='gray', rotation=90, ha='right', va='top')

plt.axvline(x=d_max_x_1_3, color='black', linestyle='--', linewidth=1,
            label=f'DSS - Random Uniform \nD-max:  {d_max_1_3:.5f}\nP-value: {p_value2:.5f}'.replace('.', ','))
plt.text(d_max_x_1_3, text_y_position, f'DSS - RU', color='black', rotation=90, ha='right', va='top')

plt.axvline(x=d_max_x_2_3, color='purple', linestyle='--', linewidth=1,
            label=f'Random Grid - Random Uniform \nD-max:  {d_max_2_3:.5f}\nP-value: {p_value3:.5f}'.replace('.', ','))
plt.text(d_max_x_2_3, text_y_position, f'RG - RU', color='purple', rotation=90, ha='right', va='top')


#_______________________________________________________________________________________________________________________________________#

# Plot
plt.suptitle('Tes Kolmogorov-Smirnov Thermal Inertia (TI) saat Malam', fontproperties=p_bold, fontsize=15, color="#44494a", x=0.435)
plt.title('ECDF / DSS Asli vs Kedua Metode Random (Grid & Uniform) ', fontproperties=p_medium, fontsize=12, color="#44494a", y=1.02, loc="left")
plt.xlabel('Nilai pada tiap koordinat', fontproperties=p_medium, fontsize=12, color="#44494a")
plt.ylabel('ECDF', fontproperties=p_medium, fontsize=12, color="#44494a")

#_______________________________________________________________________________________________________________________________________#

# Ubah titik ke koma
def indonesian_format(x, pos=None):
    return f"{x:,.0f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def indonesian_format_2(x, pos=None):
    return f"{x:,.1f}".replace(',', 'X').replace('.', ',').replace('X', '.')

plt.gca().xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
plt.gca().yaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format_2))

ax = plt.gca()
ax.xaxis.set_minor_locator(AutoMinorLocator(4))
ax.yaxis.set_minor_locator(AutoMinorLocator(4))

plt.tick_params(axis='x', which='minor', length=4, color='black')
plt.tick_params(axis='y', which='minor', length=4, color='black')

#_______________________________________________________________________________________________________________________________________#

# Plot legend
handles, labels = plt.gca().get_legend_handles_labels()
new_labels = [label.replace('.', ',') for label in labels]
new_labels.append('\nnilai Î± = 0,1')
handles.append(plt.Line2D([0], [0], color='none', linestyle='None'))
plt.legend(handles, new_labels, loc='best', frameon=True)

#_______________________________________________________________________________________________________________________________________#

plt.xlim(0, 510)
plt.grid(True)
plt.savefig(f'TI night K-S.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

# Print distribusi
print("\n")
print("Distribusi Data TI Koordinat DSS Asli (value1):")
print(f"Jumlah: {len(values1)}")
print(f"Mean: {np.mean(values1):.4f}")
print(f"Std: {np.std(values1):.4f}")
print(f"Min: {np.min(values1):.4f}")
print(f"Max: {np.max(values1):.4f}")
print()

print("Distribusi Data TI Random Grid Method (value2):")
print(f"Jumlah: {len(values2)}")
print(f"Mean: {np.mean(values2):.4f}")
print(f"Std: {np.std(values2):.4f}")
print(f"Min: {np.min(values2):.4f}")
print(f"Max: {np.max(values2):.4f}")
print()

print("Distribusi Data TI Random Uniform Method (value3):")
print(f"Jumlah: {len(values3)}")
print(f"Mean: {np.mean(values3):.4f}")
print(f"Std: {np.std(values3):.4f}")
print(f"Min: {np.min(values3):.4f}")
print(f"Max: {np.max(values3):.4f}")
print()

"""## **Day**"""

# Direktori File
file1 = '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a1. Percobaan 1/3. Extract_Data/File gabungan/combined_TI_day_p1.xlsx'
file2 = '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a1. Percobaan 1/3. Extract_Data/File gabungan/combined_random_grid_TI_day_p1.xlsx'
file3 = '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a1. Percobaan 1/3. Extract_Data/File gabungan/combined_random_uniform_TI_day_p1.xlsx'

data1 = pd.read_excel(file1)
data2 = pd.read_excel(file2)
data3 = pd.read_excel(file3)

column_name = 'Value' # Nama kolom

#_______________________________________________________________________________________________________________________________________#

# Toleransi nilai yang mau dihilangkan
values_to_remove = [0]
tolerance = 0

# Filter toleransi
def filter_values(data, values, tolerance):
    for value in values:
        data = data[(data < value - tolerance) | (data > value + tolerance)]
    return data

values1 = filter_values(data1[column_name].dropna().values, values_to_remove, tolerance)
values2 = filter_values(data2[column_name].dropna().values, values_to_remove, tolerance)
values3 = filter_values(data3[column_name].dropna().values, values_to_remove, tolerance)

#_______________________________________________________________________________________________________________________________________#

# K-S Test
ks_stat1, p_value1 = ks_2samp(values1, values2)  # DSS vs Random Grid
ks_stat2, p_value2 = ks_2samp(values1, values3)  # DSS vs Random Uniform
ks_stat3, p_value3 = ks_2samp(values2, values3)  # Random Grid vs Random Uniform

#_______________________________________________________________________________________________________________________________________#

# ECDF
def ecdf(data):
    n = len(data)
    x = np.sort(data)
    y = np.arange(1, n+1) / n
    return x, y

x1, y1 = ecdf(values1)
x2, y2 = ecdf(values2)
x3, y3 = ecdf(values3)

#_______________________________________________________________________________________________________________________________________#

# Plot
#sns.set(style="whitegrid")
plt.figure(figsize=(10, 6))

#_______________________________________________________________________________________________________________________________________#

# Plot ECDF
plt.step(x1, y1, where='post', label='Data TI Koordinat DSS Asli', color='blue')
plt.step(x2, y2, where='post', label='Data TI Random Grid Method', color='red')
plt.step(x3, y3, where='post', label='Data TI Random Uniform Method', color='green')

# Kalkulasi DMax
d_max_1_2 = np.max(np.abs(y1 - np.interp(x1, x2, y2)))
d_max_1_3 = np.max(np.abs(y1 - np.interp(x1, x3, y3)))
d_max_2_3 = np.max(np.abs(y2 - np.interp(x2, x3, y3)))

# Nilai x di DMax
d_max_x_1_2 = x1[np.argmax(np.abs(y1 - np.interp(x1, x2, y2)))]
d_max_x_1_3 = x1[np.argmax(np.abs(y1 - np.interp(x1, x3, y3)))]
d_max_x_2_3 = x2[np.argmax(np.abs(y2 - np.interp(x2, x3, y3)))]

#_______________________________________________________________________________________________________________________________________#

_, ymin = plt.gca().get_ylim()
text_y_position = ymin - 0.02

# Plot garis DMax
plt.axvline(x=d_max_x_1_2, color='gray', linestyle='--', linewidth=1,
            label=f'\nDSS - Random Grid \nD-max:  {d_max_1_2:.5f}\nP-value: {p_value1:.5f}'.replace('.', ','))
plt.text(d_max_x_1_2, text_y_position, f'DSS - RG', color='gray', rotation=90, ha='right', va='top')

plt.axvline(x=d_max_x_1_3, color='black', linestyle='--', linewidth=1,
            label=f'DSS - Random Uniform \nD-max:  {d_max_1_3:.5f}\nP-value: {p_value2:.5f}'.replace('.', ','))
plt.text(d_max_x_1_3, text_y_position, f'DSS - RU', color='black', rotation=90, ha='right', va='top')

plt.axvline(x=d_max_x_2_3, color='purple', linestyle='--', linewidth=1,
            label=f'Random Grid - Random Uniform \nD-max:  {d_max_2_3:.5f}\nP-value: {p_value3:.5f}'.replace('.', ','))
plt.text(d_max_x_2_3, text_y_position, f'RG - RU', color='purple', rotation=-90, ha='left', va='top')


#_______________________________________________________________________________________________________________________________________#

# Plot
plt.suptitle('Tes Kolmogorov-Smirnov Thermal Inertia (TI) saat Siang', fontproperties=p_bold, fontsize=15, color="#44494a", x=0.427)
plt.title('ECDF / DSS Asli vs Kedua Metode Random (Grid & Uniform) ', fontproperties=p_medium, fontsize=12, color="#44494a", y=1.02, loc="left")
plt.xlabel('Nilai pada tiap koordinat', fontproperties=p_medium, fontsize=12, color="#44494a")
plt.ylabel('ECDF', fontproperties=p_medium, fontsize=12, color="#44494a")

#_______________________________________________________________________________________________________________________________________#

# Ubah titik ke koma
def indonesian_format(x, pos=None):
    return f"{x:,.0f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def indonesian_format_2(x, pos=None):
    return f"{x:,.1f}".replace(',', 'X').replace('.', ',').replace('X', '.')

plt.gca().xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
plt.gca().yaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format_2))

ax = plt.gca()
ax.xaxis.set_minor_locator(AutoMinorLocator(4))
ax.yaxis.set_minor_locator(AutoMinorLocator(4))

plt.tick_params(axis='x', which='minor', length=4, color='black')
plt.tick_params(axis='y', which='minor', length=4, color='black')

#_______________________________________________________________________________________________________________________________________#

# Plot legend
handles, labels = plt.gca().get_legend_handles_labels()
new_labels = [label.replace('.', ',') for label in labels]
new_labels.append('\nnilai Î± = 0,1')
handles.append(plt.Line2D([0], [0], color='none', linestyle='None'))
plt.legend(handles, new_labels, loc='best', frameon=True)

#_______________________________________________________________________________________________________________________________________#

plt.xlim(0, 501)
plt.grid(True)
plt.savefig(f'TI day K-S.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

# Print distribusi
print("\n")
print("Distribusi Data TI Koordinat DSS Asli (value1):")
print(f"Jumlah: {len(values1)}")
print(f"Mean: {np.mean(values1):.4f}")
print(f"Std: {np.std(values1):.4f}")
print(f"Min: {np.min(values1):.4f}")
print(f"Max: {np.max(values1):.4f}")
print()

print("Distribusi Data TI Random Grid Method (value2):")
print(f"Jumlah: {len(values2)}")
print(f"Mean: {np.mean(values2):.4f}")
print(f"Std: {np.std(values2):.4f}")
print(f"Min: {np.min(values2):.4f}")
print(f"Max: {np.max(values2):.4f}")
print()

print("Distribusi Data TI Random Uniform Method (value3):")
print(f"Jumlah: {len(values3)}")
print(f"Mean: {np.mean(values3):.4f}")
print(f"Std: {np.std(values3):.4f}")
print(f"Min: {np.min(values3):.4f}")
print(f"Max: {np.max(values3):.4f}")
print()