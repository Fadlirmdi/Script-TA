# -*- coding: utf-8 -*-
"""Step 4/5 - Comparing data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vBnwjtFQA6wJhvN8HGIXUh7n8XhRwgMV

# **File used**

**All Extracted Data**

**semua file di: Tugas Akhir -> Data -> Raw Data -> 3. Extracted_Data**


*------------------------------------------------------------------------------------------------------------------------------------------------------------------------*

# **Must Running**
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.ticker as mtick
import matplotlib.ticker as ticker
import matplotlib as mpl

from matplotlib import font_manager as fm
from matplotlib.patches import Rectangle
from matplotlib.ticker import (MultipleLocator, AutoMinorLocator)

from google.colab import drive
drive.mount('/content/drive')

# Input font sendiri
custom_font = '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/File lain/Font/Poppins-Bold.ttf'
p_bold = fm.FontProperties(fname=custom_font)

custom_font2 = '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/File lain/Font/Poppins-Medium.ttf'
p_medium = fm.FontProperties(fname=custom_font2)

custom_font3 = '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/File lain/Font/Poppins-Regular.ttf'
p_regular = fm.FontProperties(fname=custom_font3)

custom_font4 = '/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/File lain/Font/Poppins-SemiBold.ttf'
p_semibold = fm.FontProperties(fname=custom_font4)

"""# **Combine All Attr**

----------------------------------------
"""

input_files = {
    "Region_1": [
        "/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/1. Extract_Data/random_uniform_WaterVap_all_region_1.xlsx",
        "/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/2. Extract_Data/random_uniform_WaterVap_all_region_1.xlsx",
        "/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/3. Extract_Data/random_uniform_WaterVap_all_region_1.xlsx",
        "/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/4. Extract_Data/random_uniform_WaterVap_all_region_1.xlsx",
        "/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/5. Extract_Data/random_uniform_WaterVap_all_region_1.xlsx",
        "/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/6. Extract_Data/random_uniform_WaterVap_all_region_1.xlsx",
        "/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/7. Extract_Data/random_uniform_WaterVap_all_region_1.xlsx",
        "/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/8. Extract_Data/random_uniform_WaterVap_all_region_1.xlsx",
        "/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/9. Extract_Data/random_uniform_WaterVap_all_region_1.xlsx",
        "/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/10. Extract_Data/random_uniform_WaterVap_all_region_1.xlsx",
    ],
    "Region_2": [
        "/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/1. Extract_Data/random_uniform_WaterVap_all_region_2.xlsx",
        "/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/2. Extract_Data/random_uniform_WaterVap_all_region_2.xlsx",
        "/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/3. Extract_Data/random_uniform_WaterVap_all_region_2.xlsx",
        "/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/4. Extract_Data/random_uniform_WaterVap_all_region_2.xlsx",
        "/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/5. Extract_Data/random_uniform_WaterVap_all_region_2.xlsx",
        "/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/6. Extract_Data/random_uniform_WaterVap_all_region_2.xlsx",
        "/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/7. Extract_Data/random_uniform_WaterVap_all_region_2.xlsx",
        "/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/8. Extract_Data/random_uniform_WaterVap_all_region_2.xlsx",
        "/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/9. Extract_Data/random_uniform_WaterVap_all_region_2.xlsx",
        "/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/10. Extract_Data/random_uniform_WaterVap_all_region_2.xlsx",
    ],
    "Region_3": [
        "/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/1. Extract_Data/random_uniform_WaterVap_all_region_3.xlsx",
        "/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/2. Extract_Data/random_uniform_WaterVap_all_region_3.xlsx",
        "/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/3. Extract_Data/random_uniform_WaterVap_all_region_3.xlsx",
        "/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/4. Extract_Data/random_uniform_WaterVap_all_region_3.xlsx",
        "/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/5. Extract_Data/random_uniform_WaterVap_all_region_3.xlsx",
        "/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/6. Extract_Data/random_uniform_WaterVap_all_region_3.xlsx",
        "/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/7. Extract_Data/random_uniform_WaterVap_all_region_3.xlsx",
        "/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/8. Extract_Data/random_uniform_WaterVap_all_region_3.xlsx",
        "/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/9. Extract_Data/random_uniform_WaterVap_all_region_3.xlsx",
        "/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/10. Extract_Data/random_uniform_WaterVap_all_region_3.xlsx",
    ],
}


output_files = {
    "Region_1": "/content/average_random_uniform_WaterVap_all_1.xlsx",
    "Region_2": "/content/average_random_uniform_WaterVap_all_2.xlsx",
    "Region_3": "/content/average_random_uniform_WaterVap_all_3.xlsx",
}


def calculate_average(input_files, output_file, columns=("Longitude", "Latitude", "extracted_value")):
    data_frames = []

    for file in input_files:
        try:
            df = pd.read_excel(file)
            if all(col in df.columns for col in columns):
                data_frames.append(df[list(columns)])
            else:
                missing_cols = [col for col in columns if col not in df.columns]
                print(f"Missing columns {missing_cols} in {file}. Skipping.")
        except Exception as e:
            print(f"Error reading file {file}: {e}")

    if data_frames:
        combined_df = pd.concat(data_frames, axis=1)
        longitude_latitude = data_frames[0][["Longitude", "Latitude"]]

        extracted_values = combined_df.filter(like="extracted_value")
        averaged_values = extracted_values.mean(axis=1)

        final_df = longitude_latitude.copy()
        final_df["Extracted_Value"] = averaged_values
        final_df.to_excel(output_file, index=False)
        print(f"Averaged data saved to {output_file}")

    else:
        print(f"No data processed for {output_file}. Ensure input files contain the specified columns.")

for region, files in input_files.items():
    if region in output_files:
        calculate_average(files, output_files[region])

"""# **Albedo Histogram**

## **Albedo Histogram - region 1**

----------------------------------------
"""

# Direktori File
df1 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_DSS_albedo_1.xlsx')
df2 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_grid_albedo_1.xlsx')
df3 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_uniform_albedo_1.xlsx')

# Min, Max, Std
min_val1, max_val1, std_val1, ave_val1 = df1['Extracted_Value'].min(), df1['Extracted_Value'].max(), df1['Extracted_Value'].std(), df1['Extracted_Value'].mean()
min_val2, max_val2, std_val2, ave_val2 = df2['Extracted_Value'].min(), df2['Extracted_Value'].max(), df2['Extracted_Value'].std(), df2['Extracted_Value'].mean()
min_val3, max_val3, std_val3, ave_val3 = df3['Extracted_Value'].min(), df3['Extracted_Value'].max(), df3['Extracted_Value'].std(), df3['Extracted_Value'].mean()

#_______________________________________________________________________________________________________________________________________#

# Ubah titik ke koma
def indonesia_format_koma(num):
    return f"{num:,.4f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def indonesian_format(x, pos=None):
    return f"{x:,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.')

# Ubah format min, max, std ke koma
min_val1, max_val1, std_val1, ave_val1 = indonesia_format_koma(min_val1), indonesia_format_koma(max_val1), indonesia_format_koma(std_val1), indonesia_format_koma(ave_val1)
min_val2, max_val2, std_val2, ave_val2 = indonesia_format_koma(min_val2), indonesia_format_koma(max_val2), indonesia_format_koma(std_val2), indonesia_format_koma(ave_val2)
min_val3, max_val3, std_val3, ave_val3 = indonesia_format_koma(min_val3), indonesia_format_koma(max_val3), indonesia_format_koma(std_val3), indonesia_format_koma(ave_val3)

#_______________________________________________________________________________________________________________________________________#

# SNS Plot
sns.set(style="whitegrid")
fig, axes = plt.subplots(1, 3, figsize=(16, 6.5), sharey=True)

#_______________________________________________________________________________________________________________________________________#

# Hist
hist1 = sns.histplot(data=df1, x='Extracted_Value', bins='auto', kde=True, color='blue',
                     ax=axes[0],
                     label=f'Min={min_val1}    Max={max_val1}    Std={std_val1}    Ave={ave_val1}')

hist2 = sns.histplot(data=df2, x='Extracted_Value', bins='auto', kde=True, color='red',
                     ax=axes[1],
                     label=f'Min={min_val2}    Max={max_val2}    Std={std_val2}    Ave={ave_val2}')

hist3 = sns.histplot(data=df3, x='Extracted_Value', bins='auto', kde=True, color='green',
                     ax=axes[2],
                     label=f'Min={min_val3}    Max={max_val3}    Std={std_val3}    Ave={ave_val3}')

max_y_val = max(max([p.get_height() for p in hist1.patches]),
                max([p.get_height() for p in hist2.patches]),
                max([p.get_height() for p in hist3.patches]))

# Set properti legenda
axes[0].legend(loc='center', bbox_to_anchor=(0.5, -0.2), handlelength=0, handletextpad=0, prop=p_regular)
axes[1].legend(loc='center', bbox_to_anchor=(0.5, -0.2), handlelength=0, handletextpad=0, prop=p_regular)
axes[2].legend(loc='center', bbox_to_anchor=(0.5, -0.2), handlelength=0, handletextpad=0, prop=p_regular)

# Nampilin semua y-label
axes[0].tick_params(labelleft=True)
axes[1].tick_params(labelleft=True)
axes[2].tick_params(labelleft=True)

# Set y dari nilai tertinggi
axes[0].set_ylim(0, max_y_val + 5)
axes[1].set_ylim(0, max_y_val + 5)
axes[2].set_ylim(0, max_y_val + 5)

#_______________________________________________________________________________________________________________________________________#

# Histogram file 1
axes[0].set_title('Data dari Koordinat DSS', fontproperties=p_regular, fontsize=13)
axes[0].set_xlabel('Nilai albedo', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[0].set_ylabel('Banyak data', fontproperties=p_semibold, fontsize=11, color="#44494a")

# Hitung jumlah per bin
for p in hist1.patches:
    height = p.get_height()
    if height > 0:
        axes[0].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[0].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))

#_______________________________________________________________________________________________________________________________________#

# Histogram file 2
axes[1].set_title('Data dari Koordinat Random Grid (RG)', fontproperties=p_regular, fontsize=13)
axes[1].set_xlabel('Nilai albedo', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[1].set_ylabel('')

# Hitung jumlah per bin
for p in hist2.patches:
    height = p.get_height()
    if height > 0:
        axes[1].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[1].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[1].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

# Histogram file 3
axes[2].set_title('Data dari Koordinat Random Uniform (RU)', fontproperties=p_regular, fontsize=13)
axes[2].set_xlabel('Nilai albedo', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[2].set_ylabel('')

# Hitung jumlah per bin
for p in hist3.patches:
    height = p.get_height()
    if height > 0:
        axes[2].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[2].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[2].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

axes[0].set_xlim(0.32, 0.4)
axes[1].set_xlim(0.32, 0.4)
axes[2].set_xlim(0.32, 0.4)

for ax in axes:
    ax.set_ylim(0, max_y_val + 5)
    ax.xaxis.set_minor_locator(AutoMinorLocator(4))
    ax.yaxis.set_minor_locator(AutoMinorLocator(4))
    ax.tick_params(axis='x', which='minor', length=4, color='black')
    ax.tick_params(axis='y', which='minor', length=4, color='black')

# Layout histogram
plt.suptitle(
    'Perbandingan Nilai Albedo dari Ketiga Koordinat \nWilayah 1 - (Olympus Mons dan Amazonis Planitia)',
    y=1.05, fontproperties=p_semibold, fontsize=14)
plt.figtext(0.5, 0.94, '30°LU - 10°LS dan 140°BB - 170°BB', fontsize=12, ha='center', fontproperties=p_medium)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 1
box_x_start = axes[1].get_position().xmin-.055
box_x_end = axes[2].get_position().xmax+.095
box_y_start = axes[1].get_position().ymin
box_y_end = axes[1].get_position().ymax+.01

rect = Rectangle(
    (box_x_start, box_y_start),
    box_x_end - box_x_start,
    box_y_end - box_y_start,
    linewidth=1.5,
    edgecolor='#f47478',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start + box_x_end) / 2
box_title_y = box_y_end + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=13,
    color='#262626',
    fontweight='bold',
    fontproperties=p_medium
)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 2
box_x_start2 = axes[0].get_position().xmin-.102
box_x_end2 = axes[0].get_position().xmax-.02
box_y_start2 = axes[0].get_position().ymin
box_y_end2 = axes[0].get_position().ymax+.01

rect = Rectangle(
    (box_x_start2, box_y_start2),
    box_x_end2 - box_x_start2,
    box_y_end2 - box_y_start2,
    linewidth=1.5,
    edgecolor='#7474f8',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start2 + box_x_end2) / 2
box_title_y = box_y_end2 + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=13,
    color='#262626',
    fontweight='bold',
    fontproperties=p_medium
)

plt.tight_layout()
plt.subplots_adjust(wspace=0.2)
plt.savefig(f'albedo 1.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

"""## **Albedo Histogram - region 2**

----------------------------------------
"""

# Direktori File
df1 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_DSS_albedo_2.xlsx')
df2 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_grid_albedo_2.xlsx')
df3 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_uniform_albedo_2.xlsx')

# Min, Max, Std
min_val1, max_val1, std_val1, ave_val1 = df1['Extracted_Value'].min(), df1['Extracted_Value'].max(), df1['Extracted_Value'].std(), df1['Extracted_Value'].mean()
min_val2, max_val2, std_val2, ave_val2 = df2['Extracted_Value'].min(), df2['Extracted_Value'].max(), df2['Extracted_Value'].std(), df2['Extracted_Value'].mean()
min_val3, max_val3, std_val3, ave_val3 = df3['Extracted_Value'].min(), df3['Extracted_Value'].max(), df3['Extracted_Value'].std(), df3['Extracted_Value'].mean()

#_______________________________________________________________________________________________________________________________________#

# Ubah titik ke koma
def indonesia_format_koma(num):
    return f"{num:,.4f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def indonesian_format(x, pos=None):
    return f"{x:,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.')

# Ubah format min, max, std ke koma
min_val1, max_val1, std_val1, ave_val1 = indonesia_format_koma(min_val1), indonesia_format_koma(max_val1), indonesia_format_koma(std_val1), indonesia_format_koma(ave_val1)
min_val2, max_val2, std_val2, ave_val2 = indonesia_format_koma(min_val2), indonesia_format_koma(max_val2), indonesia_format_koma(std_val2), indonesia_format_koma(ave_val2)
min_val3, max_val3, std_val3, ave_val3 = indonesia_format_koma(min_val3), indonesia_format_koma(max_val3), indonesia_format_koma(std_val3), indonesia_format_koma(ave_val3)

#_______________________________________________________________________________________________________________________________________#

# SNS Plot
#sns.set(style="whitegrid")
fig, axes = plt.subplots(1, 3, figsize=(16, 6.5), sharey=True)

#_______________________________________________________________________________________________________________________________________#

# Hist
hist1 = sns.histplot(data=df1, x='Extracted_Value', bins=15, kde=True, color='blue',
                     ax=axes[0],
                     label=f'Min={min_val1}    Max={max_val1}    Std={std_val1}    Ave={ave_val1}')

hist2 = sns.histplot(data=df2, x='Extracted_Value', bins=5, kde=True, color='red',
                     ax=axes[1],
                     label=f'Min={min_val2}    Max={max_val2}    Std={std_val2}    Ave={ave_val2}')

hist3 = sns.histplot(data=df3, x='Extracted_Value', bins=5, kde=True, color='green',
                     ax=axes[2],
                     label=f'Min={min_val3}    Max={max_val3}    Std={std_val3}    Ave={ave_val3}')

max_y_val = max(max([p.get_height() for p in hist1.patches]),
                max([p.get_height() for p in hist2.patches]),
                max([p.get_height() for p in hist3.patches]))

# Set properti legenda
axes[0].legend(loc='center', bbox_to_anchor=(0.5, -0.2), handlelength=0, handletextpad=0, prop=p_regular)
axes[1].legend(loc='center', bbox_to_anchor=(0.5, -0.2), handlelength=0, handletextpad=0, prop=p_regular)
axes[2].legend(loc='center', bbox_to_anchor=(0.5, -0.2), handlelength=0, handletextpad=0, prop=p_regular)

# Nampilin semua y-label
axes[0].tick_params(labelleft=True)
axes[1].tick_params(labelleft=True)
axes[2].tick_params(labelleft=True)

# Set y dari nilai tertinggi
axes[0].set_ylim(0, max_y_val + 5)
axes[1].set_ylim(0, max_y_val + 5)
axes[2].set_ylim(0, max_y_val + 5)

#_______________________________________________________________________________________________________________________________________#

# Histogram file 1
axes[0].set_title('Data dari Koordinat DSS', fontproperties=p_regular, fontsize=13)
axes[0].set_xlabel('Nilai albedo', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[0].set_ylabel('Banyak data', fontproperties=p_semibold, fontsize=11, color="#44494a")

# Hitung jumlah per bin
for p in hist1.patches:
    height = p.get_height()
    if height > 0:
        axes[0].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[0].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))

#_______________________________________________________________________________________________________________________________________#

# Histogram file 2
axes[1].set_title('Data dari Koordinat Random Grid (RG)', fontproperties=p_regular, fontsize=13)
axes[1].set_xlabel('Nilai albedo', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[1].set_ylabel('')

# Hitung jumlah per bin
for p in hist2.patches:
    height = p.get_height()
    if height > 0:
        axes[1].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[1].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[1].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

# Histogram file 3
axes[2].set_title('Data dari Koordinat Random Uniform (RU)', fontproperties=p_regular, fontsize=13)
axes[2].set_xlabel('Nilai albedo', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[2].set_ylabel('')

# Hitung jumlah per bin
for p in hist3.patches:
    height = p.get_height()
    if height > 0:
        axes[2].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[2].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[2].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

axes[0].set_xlim(0.1, 0.45)
axes[1].set_xlim(0.1, 0.45)
axes[2].set_xlim(0.3, 0.45)

for ax in axes:
    ax.set_ylim(0, max_y_val + 5)
    ax.xaxis.set_minor_locator(AutoMinorLocator(4))
    ax.yaxis.set_minor_locator(AutoMinorLocator(4))
    ax.tick_params(axis='x', which='minor', length=4, color='black')
    ax.tick_params(axis='y', which='minor', length=4, color='black')

# Layout histogram
plt.suptitle(
    'Perbandingan Nilai Albedo dari Ketiga Koordinat \nWilayah 2 - (Arabia Terra, Chryse Planitia, dan Ares Valis)',
    y=1.05, fontproperties=p_semibold, fontsize=14)
plt.figtext(0.5, 0.94, '30°LU - 10°LS dan 10°BT - 50°BB', fontsize=12, ha='center', fontproperties=p_medium)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 1
box_x_start = axes[1].get_position().xmin-.055
box_x_end = axes[2].get_position().xmax+.09
box_y_start = axes[1].get_position().ymin
box_y_end = axes[1].get_position().ymax+.01

rect = Rectangle(
    (box_x_start, box_y_start),
    box_x_end - box_x_start,
    box_y_end - box_y_start,
    linewidth=1.5,
    edgecolor='#f47478',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start + box_x_end) / 2
box_title_y = box_y_end + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=13,
    color='#262626',
    fontweight='bold',
    fontproperties=p_medium
)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 2
box_x_start2 = axes[0].get_position().xmin-.102
box_x_end2 = axes[0].get_position().xmax-.02
box_y_start2 = axes[0].get_position().ymin
box_y_end2 = axes[0].get_position().ymax+.01

rect = Rectangle(
    (box_x_start2, box_y_start2),
    box_x_end2 - box_x_start2,
    box_y_end2 - box_y_start2,
    linewidth=1.5,
    edgecolor='#7474f8',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start2 + box_x_end2) / 2
box_title_y = box_y_end2 + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=13,
    color='#262626',
    fontweight='bold',
    fontproperties=p_medium
)

plt.tight_layout()
plt.subplots_adjust(wspace=0.2)
plt.savefig(f'albedo 2.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

"""## **Albedo Histogram - region 3**

----------------------------------------
"""

# Direktori File
df1 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_DSS_albedo_3.xlsx')
df2 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_grid_albedo_3.xlsx')
df3 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_uniform_albedo_3.xlsx')

# Min, Max, Std
min_val1, max_val1, std_val1, ave_val1 = df1['Extracted_Value'].min(), df1['Extracted_Value'].max(), df1['Extracted_Value'].std(), df1['Extracted_Value'].mean()
min_val2, max_val2, std_val2, ave_val2 = df2['Extracted_Value'].min(), df2['Extracted_Value'].max(), df2['Extracted_Value'].std(), df2['Extracted_Value'].mean()
min_val3, max_val3, std_val3, ave_val3 = df3['Extracted_Value'].min(), df3['Extracted_Value'].max(), df3['Extracted_Value'].std(), df3['Extracted_Value'].mean()

#_______________________________________________________________________________________________________________________________________#

# Ubah titik ke koma
def indonesia_format_koma(num):
    return f"{num:,.4f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def indonesian_format(x, pos=None):
    return f"{x:,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.')

# Ubah format min, max, std ke koma
min_val1, max_val1, std_val1, ave_val1 = indonesia_format_koma(min_val1), indonesia_format_koma(max_val1), indonesia_format_koma(std_val1), indonesia_format_koma(ave_val1)
min_val2, max_val2, std_val2, ave_val2 = indonesia_format_koma(min_val2), indonesia_format_koma(max_val2), indonesia_format_koma(std_val2), indonesia_format_koma(ave_val2)
min_val3, max_val3, std_val3, ave_val3 = indonesia_format_koma(min_val3), indonesia_format_koma(max_val3), indonesia_format_koma(std_val3), indonesia_format_koma(ave_val3)

#_______________________________________________________________________________________________________________________________________#

# SNS Plot
#sns.set(style="whitegrid")
fig, axes = plt.subplots(1, 3, figsize=(16, 6.5), sharey=True)

#_______________________________________________________________________________________________________________________________________#

# Hist
hist1 = sns.histplot(data=df1, x='Extracted_Value', bins='auto', kde=True, color='blue',
                     ax=axes[0],
                     label=f'Min={min_val1}    Max={max_val1}    Std={std_val1}    Ave={ave_val1}')

hist2 = sns.histplot(data=df2, x='Extracted_Value', bins=25, kde=True, color='red',
                     ax=axes[1],
                     label=f'Min={min_val2}    Max={max_val2}    Std={std_val2}    Ave={ave_val2}')

hist3 = sns.histplot(data=df3, x='Extracted_Value', bins=25, kde=True, color='green',
                     ax=axes[2],
                     label=f'Min={min_val3}    Max={max_val3}    Std={std_val3}    Ave={ave_val3}')

max_y_val = max(max([p.get_height() for p in hist1.patches]),
                max([p.get_height() for p in hist2.patches]),
                max([p.get_height() for p in hist3.patches]))

# Set properti legenda
axes[0].legend(loc='center', bbox_to_anchor=(0.5, -0.2), handlelength=0, handletextpad=0, prop=p_regular)
axes[1].legend(loc='center', bbox_to_anchor=(0.5, -0.2), handlelength=0, handletextpad=0, prop=p_regular)
axes[2].legend(loc='center', bbox_to_anchor=(0.5, -0.2), handlelength=0, handletextpad=0, prop=p_regular)

# Nampilin semua y-label
axes[0].tick_params(labelleft=True)
axes[1].tick_params(labelleft=True)
axes[2].tick_params(labelleft=True)

# Set y dari nilai tertinggi
axes[0].set_ylim(0, max_y_val + 5)
axes[1].set_ylim(0, max_y_val + 5)
axes[2].set_ylim(0, max_y_val + 5)

#_______________________________________________________________________________________________________________________________________#

# Histogram file 1
axes[0].set_title('Data dari Koordinat DSS', fontproperties=p_regular, fontsize=13)
axes[0].set_xlabel('Nilai albedo', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[0].set_ylabel('Banyak data', fontproperties=p_semibold, fontsize=11, color="#44494a")

# Hitung jumlah per bin
for p in hist1.patches:
    height = p.get_height()
    if height > 0:
        axes[0].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[0].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))

#_______________________________________________________________________________________________________________________________________#

# Histogram file 2
axes[1].set_title('Data dari Koordinat Random Grid (RG)', fontproperties=p_regular, fontsize=13)
axes[1].set_xlabel('Nilai albedo', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[1].set_ylabel('')

# Hitung jumlah per bin
for p in hist2.patches:
    height = p.get_height()
    if height > 0:
        axes[1].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[1].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[1].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

# Histogram file 3
axes[2].set_title('Data dari Koordinat Random Uniform (RU)', fontproperties=p_regular, fontsize=13)
axes[2].set_xlabel('Nilai albedo', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[2].set_ylabel('')

# Hitung jumlah per bin
for p in hist3.patches:
    height = p.get_height()
    if height > 0:
        axes[2].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[2].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[2].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

axes[0].set_xlim(0.1, 0.45)
axes[1].set_xlim(0.15, 0.4)
axes[2].set_xlim(0.15, 0.4)

for ax in axes:
    ax.set_ylim(0, max_y_val + 5)
    ax.xaxis.set_minor_locator(AutoMinorLocator(4))
    ax.yaxis.set_minor_locator(AutoMinorLocator(4))
    ax.tick_params(axis='x', which='minor', length=4, color='black')
    ax.tick_params(axis='y', which='minor', length=4, color='black')

# Layout histogram
plt.suptitle(
    'Perbandingan Nilai Albedo dari Ketiga Koordinat \nWilayah 3 - (Tharsis, Elysium Planitia, Utopia Planitia, dan Syrtis Major)',
    y=1.05, fontproperties=p_semibold, fontsize=14)
plt.figtext(0.5, 0.94, '40°LU - 20°LS dan 60°BT - 180°BT', fontsize=12, ha='center', fontproperties=p_medium)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 1
box_x_start = axes[1].get_position().xmin-.055
box_x_end = axes[2].get_position().xmax+.095
box_y_start = axes[1].get_position().ymin
box_y_end = axes[1].get_position().ymax+.01

rect = Rectangle(
    (box_x_start, box_y_start),
    box_x_end - box_x_start,
    box_y_end - box_y_start,
    linewidth=1.5,
    edgecolor='#f47478',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start + box_x_end) / 2
box_title_y = box_y_end + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=13,
    color='#262626',
    fontweight='bold',
    fontproperties=p_medium
)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 2
box_x_start2 = axes[0].get_position().xmin-.102
box_x_end2 = axes[0].get_position().xmax-.02
box_y_start2 = axes[0].get_position().ymin
box_y_end2 = axes[0].get_position().ymax+.01

rect = Rectangle(
    (box_x_start2, box_y_start2),
    box_x_end2 - box_x_start2,
    box_y_end2 - box_y_start2,
    linewidth=1.5,
    edgecolor='#7474f8',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start2 + box_x_end2) / 2
box_title_y = box_y_end2 + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=13,
    color='#262626',
    fontweight='bold',
    fontproperties=p_medium
)

plt.tight_layout()
plt.subplots_adjust(wspace=0.2)
plt.savefig(f'albedo 3.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

"""## **Albedo Histogram - All Regions**

----------------------------------------
"""

# Direktori File
df1 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Combine Result/combined_albedo.xlsx')
df2 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Combine Result/combined_random_grid_albedo.xlsx')
df3 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Combine Result/combined_random_uniform_albedo.xlsx')

# Min, Max, Std
min_val1, max_val1, std_val1, ave_val1 = df1['Extracted_Value'].min(), df1['Extracted_Value'].max(), df1['Extracted_Value'].std(), df1['Extracted_Value'].mean()
min_val2, max_val2, std_val2, ave_val2 = df2['Extracted_Value'].min(), df2['Extracted_Value'].max(), df2['Extracted_Value'].std(), df2['Extracted_Value'].mean()
min_val3, max_val3, std_val3, ave_val3 = df3['Extracted_Value'].min(), df3['Extracted_Value'].max(), df3['Extracted_Value'].std(), df3['Extracted_Value'].mean()

#_______________________________________________________________________________________________________________________________________#

# Ubah titik ke koma
def indonesia_format_koma(num):
    return f"{num:,.4f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def indonesian_format(x, pos=None):
    return f"{x:,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.')

# Ubah format min, max, std ke koma
min_val1, max_val1, std_val1, ave_val1 = indonesia_format_koma(min_val1), indonesia_format_koma(max_val1), indonesia_format_koma(std_val1), indonesia_format_koma(ave_val1)
min_val2, max_val2, std_val2, ave_val2 = indonesia_format_koma(min_val2), indonesia_format_koma(max_val2), indonesia_format_koma(std_val2), indonesia_format_koma(ave_val2)
min_val3, max_val3, std_val3, ave_val3 = indonesia_format_koma(min_val3), indonesia_format_koma(max_val3), indonesia_format_koma(std_val3), indonesia_format_koma(ave_val3)

#_______________________________________________________________________________________________________________________________________#

# SNS Plot
#sns.set(style="whitegrid")
fig, axes = plt.subplots(1, 3, figsize=(16, 6.5), sharey=True)

#_______________________________________________________________________________________________________________________________________#

# Hist
hist1 = sns.histplot(data=df1, x='Extracted_Value', bins='auto', kde=True, color='blue',
                     ax=axes[0],
                     label=f'Min={min_val1}    Max={max_val1}    Std={std_val1}    Ave={ave_val1}')

hist2 = sns.histplot(data=df2, x='Extracted_Value', bins=20, kde=True, color='red',
                     ax=axes[1],
                     label=f'Min={min_val2}    Max={max_val2}    Std={std_val2}    Ave={ave_val2}')

hist3 = sns.histplot(data=df3, x='Extracted_Value', bins=20, kde=True, color='green',
                     ax=axes[2],
                     label=f'Min={min_val3}    Max={max_val3}    Std={std_val3}    Ave={ave_val3}')

max_y_val = max(max([p.get_height() for p in hist1.patches]),
                max([p.get_height() for p in hist2.patches]),
                max([p.get_height() for p in hist3.patches]))

# Set properti legenda
axes[0].legend(loc='center', bbox_to_anchor=(0.5, -0.2), handlelength=0, handletextpad=0, prop=p_regular)
axes[1].legend(loc='center', bbox_to_anchor=(0.5, -0.2), handlelength=0, handletextpad=0, prop=p_regular)
axes[2].legend(loc='center', bbox_to_anchor=(0.5, -0.2), handlelength=0, handletextpad=0, prop=p_regular)

# Nampilin semua y-label
axes[0].tick_params(labelleft=True)
axes[1].tick_params(labelleft=True)
axes[2].tick_params(labelleft=True)

# Set y dari nilai tertinggi
axes[0].set_ylim(0, max_y_val + 5)
axes[1].set_ylim(0, max_y_val + 5)
axes[2].set_ylim(0, max_y_val + 5)

#_______________________________________________________________________________________________________________________________________#

# Histogram file 1
axes[0].set_title('Data dari Koordinat DSS', fontproperties=p_regular, fontsize=13)
axes[0].set_xlabel('Nilai albedo', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[0].set_ylabel('Banyak data', fontproperties=p_semibold, fontsize=11, color="#44494a")

# Hitung jumlah per bin
for p in hist1.patches:
    height = p.get_height()
    if height > 0:
        axes[0].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[0].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))

#_______________________________________________________________________________________________________________________________________#

# Histogram file 2
axes[1].set_title('Data dari Koordinat Random Grid (RG)', fontproperties=p_regular, fontsize=13)
axes[1].set_xlabel('Nilai albedo', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[1].set_ylabel('')

# Hitung jumlah per bin
for p in hist2.patches:
    height = p.get_height()
    if height > 0:
        axes[1].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[1].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[1].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

# Histogram file 3
axes[2].set_title('Data dari Koordinat Random Uniform (RU)', fontproperties=p_regular, fontsize=13)
axes[2].set_xlabel('Nilai albedo', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[2].set_ylabel('')

# Hitung jumlah per bin
for p in hist3.patches:
    height = p.get_height()
    if height > 0:
        axes[2].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[2].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[2].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

axes[0].set_xlim(0.1, 0.45)
axes[1].set_xlim(0.15, 0.4)
axes[2].set_xlim(0.15, 0.4)

for ax in axes:
    ax.set_ylim(0, max_y_val + 5)
    ax.xaxis.set_minor_locator(AutoMinorLocator(4))
    ax.yaxis.set_minor_locator(AutoMinorLocator(4))
    ax.tick_params(axis='x', which='minor', length=4, color='black')
    ax.tick_params(axis='y', which='minor', length=4, color='black')

# Layout histogram
plt.suptitle(
    'Perbandingan Nilai Albedo dari Ketiga Koordinat \nGabungan Wilayah 1, 2, dan 3',
    y=1.05, fontproperties=p_semibold, fontsize=14)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 1
box_x_start = axes[1].get_position().xmin-.055
box_x_end = axes[2].get_position().xmax+.095
box_y_start = axes[1].get_position().ymin
box_y_end = axes[1].get_position().ymax+.01

rect = Rectangle(
    (box_x_start, box_y_start),
    box_x_end - box_x_start,
    box_y_end - box_y_start,
    linewidth=1.5,
    edgecolor='#f47478',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start + box_x_end) / 2
box_title_y = box_y_end + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=13,
    color='#262626',
    fontweight='bold',
    fontproperties=p_medium
)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 2
box_x_start2 = axes[0].get_position().xmin-.102
box_x_end2 = axes[0].get_position().xmax-.02
box_y_start2 = axes[0].get_position().ymin
box_y_end2 = axes[0].get_position().ymax+.01

rect = Rectangle(
    (box_x_start2, box_y_start2),
    box_x_end2 - box_x_start2,
    box_y_end2 - box_y_start2,
    linewidth=1.5,
    edgecolor='#7474f8',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start2 + box_x_end2) / 2
box_title_y = box_y_end2 + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=13,
    color='#262626',
    fontweight='bold',
    fontproperties=p_medium
)

plt.tight_layout()
plt.subplots_adjust(wspace=0.2)
plt.savefig(f'albedo seluruh.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

#_______________________________________________________________________________________________________________________________________#
print('')

# Ekstrak KDE
kde_dss = sns.kdeplot(df1['Extracted_Value'], bw_adjust=1).get_lines()[0].get_data()
kde_rg = sns.kdeplot(df2['Extracted_Value'], bw_adjust=1).get_lines()[1].get_data()
kde_ru = sns.kdeplot(df3['Extracted_Value'], bw_adjust=1).get_lines()[2].get_data()
plt.close()

# Plot KDE
plt.figure(figsize=(7, 5))
plt.plot(kde_dss[0], kde_dss[1], label='DSS', color='blue')
plt.plot(kde_rg[0], kde_rg[1], label='Random Grid (RG)', color='red')
plt.plot(kde_ru[0], kde_ru[1], label='Random Uniform (RU)', color='green')

plt.title('Perbandingan KDE dari Koordinat DSS, RG, and RU', fontsize=10)
plt.xlabel('Nilai Albedo', fontsize=11)
plt.ylabel('Densitas', fontsize=11)
plt.legend(fontsize=10)
plt.grid(True)
plt.xlim(0.1, 0.45)

plt.gca().xaxis.set_minor_locator(MultipleLocator(0.05))
plt.gca().yaxis.set_minor_locator(MultipleLocator(0.02))

plt.minorticks_on()

plt.gca().xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
plt.gca().yaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))

plt.savefig(f'albedo KDE.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

"""# **DCI Histogram**

## **DCI Histogram - region 1**

----------------------------------------
"""

# Direktori File
df1 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_DSS_DCI_1.xlsx')
df2 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_grid_DCI_1.xlsx')
df3 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_uniform_DCI_1.xlsx')

# Min, Max, Std
min_val1, max_val1, std_val1, ave_val1 = df1['Extracted_Value'].min(), df1['Extracted_Value'].max(), df1['Extracted_Value'].std(), df1['Extracted_Value'].mean()
min_val2, max_val2, std_val2, ave_val2 = df2['Extracted_Value'].min(), df2['Extracted_Value'].max(), df2['Extracted_Value'].std(), df2['Extracted_Value'].mean()
min_val3, max_val3, std_val3, ave_val3 = df3['Extracted_Value'].min(), df3['Extracted_Value'].max(), df3['Extracted_Value'].std(), df3['Extracted_Value'].mean()

#_______________________________________________________________________________________________________________________________________#

# Ubah titik ke koma
def indonesia_format_koma(num):
    return f"{num:,.3f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def indonesian_format(x, pos=None):
    return f"{x:,.0f}".replace(',', 'X').replace('.', ',').replace('X', '.')

# Ubah format min, max, std ke koma
min_val1, max_val1, std_val1, ave_val1 = indonesia_format_koma(min_val1), indonesia_format_koma(max_val1), indonesia_format_koma(std_val1), indonesia_format_koma(ave_val1)
min_val2, max_val2, std_val2, ave_val2 = indonesia_format_koma(min_val2), indonesia_format_koma(max_val2), indonesia_format_koma(std_val2), indonesia_format_koma(ave_val2)
min_val3, max_val3, std_val3, ave_val3 = indonesia_format_koma(min_val3), indonesia_format_koma(max_val3), indonesia_format_koma(std_val3), indonesia_format_koma(ave_val3)

#_______________________________________________________________________________________________________________________________________#

# SNS Plot
#sns.set(style="whitegrid")
fig, axes = plt.subplots(1, 3, figsize=(16, 6.5), sharey=True)

#_______________________________________________________________________________________________________________________________________#

# Hist
hist1 = sns.histplot(data=df1, x='Extracted_Value', bins=25, kde=True, color='blue',
                     ax=axes[0],
                     label=f'Min={min_val1}    Max={max_val1}    Std={std_val1}    Ave={ave_val1}')

hist2 = sns.histplot(data=df2, x='Extracted_Value', bins=25, kde=True, color='red',
                     ax=axes[1],
                     label=f'Min={min_val2}    Max={max_val2}    Std={std_val2}    Ave={ave_val2}')

hist3 = sns.histplot(data=df3, x='Extracted_Value', bins=40, kde=True, color='green',
                     ax=axes[2],
                     label=f'Min={min_val3}    Max={max_val3}    Std={std_val3}    Ave={ave_val3}')

max_y_val = max(max([p.get_height() for p in hist1.patches]),
                max([p.get_height() for p in hist2.patches]),
                max([p.get_height() for p in hist3.patches]))

# Set properti legenda
axes[0].legend(loc='center', bbox_to_anchor=(0.5, -0.2), handlelength=0, handletextpad=0, prop=p_regular)
axes[1].legend(loc='center', bbox_to_anchor=(0.5, -0.2), handlelength=0, handletextpad=0, prop=p_regular)
axes[2].legend(loc='center', bbox_to_anchor=(0.5, -0.2), handlelength=0, handletextpad=0, prop=p_regular)

# Nampilin semua y-label
axes[0].tick_params(labelleft=True)
axes[1].tick_params(labelleft=True)
axes[2].tick_params(labelleft=True)

# Set y dari nilai tertinggi
axes[0].set_ylim(0, max_y_val + 5)
axes[1].set_ylim(0, max_y_val + 5)
axes[2].set_ylim(0, max_y_val + 5)

#_______________________________________________________________________________________________________________________________________#

# Histogram file 1
axes[0].set_title('Data dari Koordinat DSS', fontproperties=p_regular, fontsize=13)
axes[0].set_xlabel('Nilai DCI', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[0].set_ylabel('Banyak data', fontproperties=p_semibold, fontsize=11, color="#44494a")

# Hitung jumlah per bin
for p in hist1.patches:
    height = p.get_height()
    if height > 0:
        axes[0].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[0].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))

#_______________________________________________________________________________________________________________________________________#

# Histogram file 2
axes[1].set_title('Data dari Koordinat Random Grid (RG)', fontproperties=p_regular, fontsize=13)
axes[1].set_xlabel('Nilai DCI', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[1].set_ylabel('')

# Hitung jumlah per bin
for p in hist2.patches:
    height = p.get_height()
    if height > 0:
        axes[1].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[1].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[1].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

# Histogram file 3
axes[2].set_title('Data dari Koordinat Random Uniform (RU)', fontproperties=p_regular, fontsize=13)
axes[2].set_xlabel('Nilai DCI', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[2].set_ylabel('')

# Hitung jumlah per bin
for p in hist3.patches:
    height = p.get_height()
    if height > 0:
        axes[2].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[2].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[2].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

axes[0].set_xlim(50, 280)
axes[1].set_xlim(200, 260)
axes[2].set_xlim(200, 260)

for ax in axes:
    ax.set_ylim(0, max_y_val + 10)
    ax.xaxis.set_minor_locator(AutoMinorLocator(4))
    ax.yaxis.set_minor_locator(AutoMinorLocator(4))
    ax.tick_params(axis='x', which='minor', length=4, color='black')
    ax.tick_params(axis='y', which='minor', length=4, color='black')

# Layout histogram
plt.suptitle(
    'Perbandingan Nilai DCI dari Ketiga Koordinat \nWilayah 1 - (Olympus Mons dan Amazonis Planitia)',
    y=1.05, fontproperties=p_semibold, fontsize=14)
plt.figtext(0.5, 0.94, '30°LU - 10°LS dan 140°BB - 170°BB', fontsize=12, ha='center', fontproperties=p_medium)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 1
box_x_start = axes[1].get_position().xmin-.05
box_x_end = axes[2].get_position().xmax+.095
box_y_start = axes[1].get_position().ymin
box_y_end = axes[1].get_position().ymax+.01

rect = Rectangle(
    (box_x_start, box_y_start),
    box_x_end - box_x_start,
    box_y_end - box_y_start,
    linewidth=1.5,
    edgecolor='#f47478',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start + box_x_end) / 2
box_title_y = box_y_end + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 2
box_x_start2 = axes[0].get_position().xmin-.102
box_x_end2 = axes[0].get_position().xmax-.015
box_y_start2 = axes[0].get_position().ymin
box_y_end2 = axes[0].get_position().ymax+.01

rect = Rectangle(
    (box_x_start2, box_y_start2),
    box_x_end2 - box_x_start2,
    box_y_end2 - box_y_start2,
    linewidth=1.5,
    edgecolor='#7474f8',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start2 + box_x_end2) / 2
box_title_y = box_y_end2 + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

plt.tight_layout()
plt.subplots_adjust(wspace=0.2)
plt.savefig(f'DCI 1.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

"""## **DCI Histogram - region 2**

----------------------------------------
"""

# Direktori File
df1 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_DSS_DCI_2.xlsx')
df2 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_grid_DCI_2.xlsx')
df3 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_uniform_DCI_2.xlsx')

# Min, Max, Std
min_val1, max_val1, std_val1, ave_val1 = df1['Extracted_Value'].min(), df1['Extracted_Value'].max(), df1['Extracted_Value'].std(), df1['Extracted_Value'].mean()
min_val2, max_val2, std_val2, ave_val2 = df2['Extracted_Value'].min(), df2['Extracted_Value'].max(), df2['Extracted_Value'].std(), df2['Extracted_Value'].mean()
min_val3, max_val3, std_val3, ave_val3 = df3['Extracted_Value'].min(), df3['Extracted_Value'].max(), df3['Extracted_Value'].std(), df3['Extracted_Value'].mean()

#_______________________________________________________________________________________________________________________________________#

# Ubah titik ke koma
def indonesia_format_koma(num):
    return f"{num:,.3f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def indonesian_format(x, pos=None):
    return f"{x:,.0f}".replace(',', 'X').replace('.', ',').replace('X', '.')

# Ubah format min, max, std ke koma
min_val1, max_val1, std_val1, ave_val1 = indonesia_format_koma(min_val1), indonesia_format_koma(max_val1), indonesia_format_koma(std_val1), indonesia_format_koma(ave_val1)
min_val2, max_val2, std_val2, ave_val2 = indonesia_format_koma(min_val2), indonesia_format_koma(max_val2), indonesia_format_koma(std_val2), indonesia_format_koma(ave_val2)
min_val3, max_val3, std_val3, ave_val3 = indonesia_format_koma(min_val3), indonesia_format_koma(max_val3), indonesia_format_koma(std_val3), indonesia_format_koma(ave_val3)

#_______________________________________________________________________________________________________________________________________#

# SNS Plot
#sns.set(style="whitegrid")
fig, axes = plt.subplots(1, 3, figsize=(16, 6.5), sharey=True)

#_______________________________________________________________________________________________________________________________________#

# Hist
hist1 = sns.histplot(data=df1, x='Extracted_Value', bins=25, kde=True, color='blue',
                     ax=axes[0],
                     label=f'Min={min_val1}    Max={max_val1}    Std={std_val1}    Ave={ave_val1}')

hist2 = sns.histplot(data=df2, x='Extracted_Value', bins=25, kde=True, color='red',
                     ax=axes[1],
                     label=f'Min={min_val2}    Max={max_val2}    Std={std_val2}    Ave={ave_val2}')

hist3 = sns.histplot(data=df3, x='Extracted_Value', bins=30, kde=True, color='green',
                     ax=axes[2],
                     label=f'Min={min_val3}    Max={max_val3}    Std={std_val3}    Ave={ave_val3}')

max_y_val = max(max([p.get_height() for p in hist1.patches]),
                max([p.get_height() for p in hist2.patches]),
                max([p.get_height() for p in hist3.patches]))

# Set properti legenda
axes[0].legend(loc='center', bbox_to_anchor=(0.5, -0.2), handlelength=0, handletextpad=0, prop=p_regular)
axes[1].legend(loc='center', bbox_to_anchor=(0.5, -0.2), handlelength=0, handletextpad=0, prop=p_regular)
axes[2].legend(loc='center', bbox_to_anchor=(0.5, -0.2), handlelength=0, handletextpad=0, prop=p_regular)

# Nampilin semua y-label
axes[0].tick_params(labelleft=True)
axes[1].tick_params(labelleft=True)
axes[2].tick_params(labelleft=True)

# Set y dari nilai tertinggi
axes[0].set_ylim(0, max_y_val + 5)
axes[1].set_ylim(0, max_y_val + 5)
axes[2].set_ylim(0, max_y_val + 5)

#_______________________________________________________________________________________________________________________________________#

# Histogram file 1
axes[0].set_title('Data dari Koordinat DSS', fontproperties=p_regular, fontsize=13)
axes[0].set_xlabel('Nilai DCI', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[0].set_ylabel('Banyak data', fontproperties=p_semibold, fontsize=11, color="#44494a")

# Hitung jumlah per bin
for p in hist1.patches:
    height = p.get_height()
    if height > 0:
        axes[0].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[0].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))

#_______________________________________________________________________________________________________________________________________#

# Histogram file 2
axes[1].set_title('Data dari Koordinat Random Grid (RG)', fontproperties=p_regular, fontsize=13)
axes[1].set_xlabel('Nilai DCI', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[1].set_ylabel('')

# Hitung jumlah per bin
for p in hist2.patches:
    height = p.get_height()
    if height > 0:
        axes[1].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[1].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[1].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

# Histogram file 3
axes[2].set_title('Data dari Koordinat Random Uniform (RU)', fontproperties=p_regular, fontsize=13)
axes[2].set_xlabel('Nilai DCI', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[2].set_ylabel('')

# Hitung jumlah per bin
for p in hist3.patches:
    height = p.get_height()
    if height > 0:
        axes[2].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[2].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[2].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

axes[0].set_xlim(1, 300)
axes[1].set_xlim(50, 225)
axes[2].set_xlim(200, 260)

for ax in axes:
    ax.set_ylim(0, max_y_val + 10)
    ax.xaxis.set_minor_locator(AutoMinorLocator(4))
    ax.yaxis.set_minor_locator(AutoMinorLocator(4))
    ax.tick_params(axis='x', which='minor', length=4, color='black')
    ax.tick_params(axis='y', which='minor', length=4, color='black')

# Layout histogram
plt.suptitle(
    'Perbandingan Nilai DCI dari Ketiga Koordinat \nWilayah 2 - (Arabia Terra, Chryse Planitia, dan Ares Valis)',
    y=1.05, fontproperties=p_semibold, fontsize=14)
plt.figtext(0.5, 0.94, '30°LU - 10°LS dan 10°BT - 50°BB', fontsize=12, ha='center', fontproperties=p_medium)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 1
box_x_start = axes[1].get_position().xmin-.05
box_x_end = axes[2].get_position().xmax+.095
box_y_start = axes[1].get_position().ymin
box_y_end = axes[1].get_position().ymax+.01

rect = Rectangle(
    (box_x_start, box_y_start),
    box_x_end - box_x_start,
    box_y_end - box_y_start,
    linewidth=1.5,
    edgecolor='#f47478',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start + box_x_end) / 2
box_title_y = box_y_end + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 2
box_x_start2 = axes[0].get_position().xmin-.102
box_x_end2 = axes[0].get_position().xmax-.015
box_y_start2 = axes[0].get_position().ymin
box_y_end2 = axes[0].get_position().ymax+.01

rect = Rectangle(
    (box_x_start2, box_y_start2),
    box_x_end2 - box_x_start2,
    box_y_end2 - box_y_start2,
    linewidth=1.5,
    edgecolor='#7474f8',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start2 + box_x_end2) / 2
box_title_y = box_y_end2 + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

plt.tight_layout()
plt.subplots_adjust(wspace=0.2)
plt.savefig(f'DCI 2.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

"""## **DCI Histogram - region 3**

----------------------------------------
"""

# Direktori File
df1 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_DSS_DCI_3.xlsx')
df2 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_grid_DCI_3.xlsx')
df3 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_uniform_DCI_3.xlsx')

# Min, Max, Std
min_val1, max_val1, std_val1, ave_val1 = df1['Extracted_Value'].min(), df1['Extracted_Value'].max(), df1['Extracted_Value'].std(), df1['Extracted_Value'].mean()
min_val2, max_val2, std_val2, ave_val2 = df2['Extracted_Value'].min(), df2['Extracted_Value'].max(), df2['Extracted_Value'].std(), df2['Extracted_Value'].mean()
min_val3, max_val3, std_val3, ave_val3 = df3['Extracted_Value'].min(), df3['Extracted_Value'].max(), df3['Extracted_Value'].std(), df3['Extracted_Value'].mean()

#_______________________________________________________________________________________________________________________________________#

# Ubah titik ke koma
def indonesia_format_koma(num):
    return f"{num:,.3f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def indonesian_format(x, pos=None):
    return f"{x:,.0f}".replace(',', 'X').replace('.', ',').replace('X', '.')

# Ubah format min, max, std ke koma
min_val1, max_val1, std_val1, ave_val1 = indonesia_format_koma(min_val1), indonesia_format_koma(max_val1), indonesia_format_koma(std_val1), indonesia_format_koma(ave_val1)
min_val2, max_val2, std_val2, ave_val2 = indonesia_format_koma(min_val2), indonesia_format_koma(max_val2), indonesia_format_koma(std_val2), indonesia_format_koma(ave_val2)
min_val3, max_val3, std_val3, ave_val3 = indonesia_format_koma(min_val3), indonesia_format_koma(max_val3), indonesia_format_koma(std_val3), indonesia_format_koma(ave_val3)

#_______________________________________________________________________________________________________________________________________#

# SNS Plot
#sns.set(style="whitegrid")
fig, axes = plt.subplots(1, 3, figsize=(16, 6.5), sharey=True)

#_______________________________________________________________________________________________________________________________________#

# Hist
hist1 = sns.histplot(data=df1, x='Extracted_Value', bins=25, kde=True, color='blue',
                     ax=axes[0],
                     label=f'Min={min_val1}    Max={max_val1}    Std={std_val1}    Ave={ave_val1}')

hist2 = sns.histplot(data=df2, x='Extracted_Value', bins=25, kde=True, color='red',
                     ax=axes[1],
                     label=f'Min={min_val2}    Max={max_val2}    Std={std_val2}    Ave={ave_val2}')

hist3 = sns.histplot(data=df3, x='Extracted_Value', bins=30, kde=True, color='green',
                     ax=axes[2],
                     label=f'Min={min_val3}    Max={max_val3}    Std={std_val3}    Ave={ave_val3}')

max_y_val = max(max([p.get_height() for p in hist1.patches]),
                max([p.get_height() for p in hist2.patches]),
                max([p.get_height() for p in hist3.patches]))

# Set properti legenda
axes[0].legend(loc='center', bbox_to_anchor=(0.5, -0.2), handlelength=0, handletextpad=0, prop=p_regular)
axes[1].legend(loc='center', bbox_to_anchor=(0.5, -0.2), handlelength=0, handletextpad=0, prop=p_regular)
axes[2].legend(loc='center', bbox_to_anchor=(0.5, -0.2), handlelength=0, handletextpad=0, prop=p_regular)

# Nampilin semua y-label
axes[0].tick_params(labelleft=True)
axes[1].tick_params(labelleft=True)
axes[2].tick_params(labelleft=True)

# Set y dari nilai tertinggi
axes[0].set_ylim(0, max_y_val + 5)
axes[1].set_ylim(0, max_y_val + 5)
axes[2].set_ylim(0, max_y_val + 5)

#_______________________________________________________________________________________________________________________________________#

# Histogram file 1
axes[0].set_title('Data dari Koordinat DSS', fontproperties=p_regular, fontsize=13)
axes[0].set_xlabel('Nilai DCI', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[0].set_ylabel('Banyak data', fontproperties=p_semibold, fontsize=11, color="#44494a")

# Hitung jumlah per bin
for p in hist1.patches:
    height = p.get_height()
    if height > 0:
        axes[0].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[0].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))

#_______________________________________________________________________________________________________________________________________#

# Histogram file 2
axes[1].set_title('Data dari Koordinat Random Grid (RG)', fontproperties=p_regular, fontsize=13)
axes[1].set_xlabel('Nilai DCI', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[1].set_ylabel('')

# Hitung jumlah per bin
for p in hist2.patches:
    height = p.get_height()
    if height > 0:
        axes[1].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[1].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[1].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

# Histogram file 3
axes[2].set_title('Data dari Koordinat Random Uniform (RU)', fontproperties=p_regular, fontsize=13)
axes[2].set_xlabel('Nilai DCI', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[2].set_ylabel('')

# Hitung jumlah per bin
for p in hist3.patches:
    height = p.get_height()
    if height > 0:
        axes[2].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[2].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[2].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

axes[0].set_xlim(0, 300)
axes[1].set_xlim(30, 270)
axes[2].set_xlim(30, 270)

for ax in axes:
    ax.set_ylim(0, max_y_val + 10)
    ax.xaxis.set_minor_locator(AutoMinorLocator(4))
    ax.yaxis.set_minor_locator(AutoMinorLocator(4))
    ax.tick_params(axis='x', which='minor', length=4, color='black')
    ax.tick_params(axis='y', which='minor', length=4, color='black')

# Layout histogram
plt.suptitle(
    'Perbandingan Nilai DCI dari Ketiga Koordinat \nWilayah 3 - (Tharsis, Elysium Planitia, Utopia Planitia, dan Syrtis Major)',
    y=1.05, fontproperties=p_semibold, fontsize=14)
plt.figtext(0.5, 0.94, '40°LU - 20°LS dan 60°BT - 180°BT', fontsize=12, ha='center', fontproperties=p_medium)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 1
box_x_start = axes[1].get_position().xmin-.05
box_x_end = axes[2].get_position().xmax+.095
box_y_start = axes[1].get_position().ymin
box_y_end = axes[1].get_position().ymax+.01

rect = Rectangle(
    (box_x_start, box_y_start),
    box_x_end - box_x_start,
    box_y_end - box_y_start,
    linewidth=1.5,
    edgecolor='#f47478',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start + box_x_end) / 2
box_title_y = box_y_end + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 2
box_x_start2 = axes[0].get_position().xmin-.102
box_x_end2 = axes[0].get_position().xmax-.015
box_y_start2 = axes[0].get_position().ymin
box_y_end2 = axes[0].get_position().ymax+.01

rect = Rectangle(
    (box_x_start2, box_y_start2),
    box_x_end2 - box_x_start2,
    box_y_end2 - box_y_start2,
    linewidth=1.5,
    edgecolor='#7474f8',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start2 + box_x_end2) / 2
box_title_y = box_y_end2 + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

plt.tight_layout()
plt.subplots_adjust(wspace=0.2)
plt.savefig(f'DCI 3.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

"""## **DCI Histogram - All Regions**

----------------------------------------
"""

# Direktori File
df1 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Combine Result/combined_DCI.xlsx')
df2 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Combine Result/combined_random_grid_DCI.xlsx')
df3 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Combine Result/combined_random_uniform_DCI.xlsx')

# Min, Max, Std
min_val1, max_val1, std_val1, ave_val1 = df1['Extracted_Value'].min(), df1['Extracted_Value'].max(), df1['Extracted_Value'].std(), df1['Extracted_Value'].mean()
min_val2, max_val2, std_val2, ave_val2 = df2['Extracted_Value'].min(), df2['Extracted_Value'].max(), df2['Extracted_Value'].std(), df2['Extracted_Value'].mean()
min_val3, max_val3, std_val3, ave_val3 = df3['Extracted_Value'].min(), df3['Extracted_Value'].max(), df3['Extracted_Value'].std(), df3['Extracted_Value'].mean()

#_______________________________________________________________________________________________________________________________________#

# Ubah titik ke koma
def indonesia_format_koma(num):
    return f"{num:,.3f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def indonesian_format(x, pos=None):
    return f"{x:,.0f}".replace(',', 'X').replace('.', ',').replace('X', '.')

# Ubah format min, max, std ke koma
min_val1, max_val1, std_val1, ave_val1 = indonesia_format_koma(min_val1), indonesia_format_koma(max_val1), indonesia_format_koma(std_val1), indonesia_format_koma(ave_val1)
min_val2, max_val2, std_val2, ave_val2 = indonesia_format_koma(min_val2), indonesia_format_koma(max_val2), indonesia_format_koma(std_val2), indonesia_format_koma(ave_val2)
min_val3, max_val3, std_val3, ave_val3 = indonesia_format_koma(min_val3), indonesia_format_koma(max_val3), indonesia_format_koma(std_val3), indonesia_format_koma(ave_val3)

#_______________________________________________________________________________________________________________________________________#

# SNS Plot
#sns.set(style="whitegrid")
fig, axes = plt.subplots(1, 3, figsize=(16, 6.5), sharey=True)

#_______________________________________________________________________________________________________________________________________#

# Hist
hist1 = sns.histplot(data=df1, x='Extracted_Value', bins='auto', kde=True, color='blue',
                     ax=axes[0],
                     label=f'Min={min_val1}    Max={max_val1}    Std={std_val1}    Ave={ave_val1}')

hist2 = sns.histplot(data=df2, x='Extracted_Value', bins='auto', kde=True, color='red',
                     ax=axes[1],
                     label=f'Min={min_val2}    Max={max_val2}    Std={std_val2}    Ave={ave_val2}')

hist3 = sns.histplot(data=df3, x='Extracted_Value', bins=20, kde=True, color='green',
                     ax=axes[2],
                     label=f'Min={min_val3}    Max={max_val3}    Std={std_val3}    Ave={ave_val3}')

max_y_val = max(max([p.get_height() for p in hist1.patches]),
                max([p.get_height() for p in hist2.patches]),
                max([p.get_height() for p in hist3.patches]))

# Set properti legenda
axes[0].legend(loc='center', bbox_to_anchor=(0.5, -0.2), handlelength=0, handletextpad=0, prop=p_regular)
axes[1].legend(loc='center', bbox_to_anchor=(0.5, -0.2), handlelength=0, handletextpad=0, prop=p_regular)
axes[2].legend(loc='center', bbox_to_anchor=(0.5, -0.2), handlelength=0, handletextpad=0, prop=p_regular)

# Nampilin semua y-label
axes[0].tick_params(labelleft=True)
axes[1].tick_params(labelleft=True)
axes[2].tick_params(labelleft=True)

# Set y dari nilai tertinggi
axes[0].set_ylim(0, max_y_val + 5)
axes[1].set_ylim(0, max_y_val + 5)
axes[2].set_ylim(0, max_y_val + 5)

#_______________________________________________________________________________________________________________________________________#

# Histogram file 1
axes[0].set_title('Data dari Koordinat DSS', fontproperties=p_regular, fontsize=13)
axes[0].set_xlabel('Nilai DCI', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[0].set_ylabel('Banyak data', fontproperties=p_semibold, fontsize=11, color="#44494a")

# Hitung jumlah per bin
for p in hist1.patches:
    height = p.get_height()
    if height > 0:
        axes[0].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[0].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))

#_______________________________________________________________________________________________________________________________________#

# Histogram file 2
axes[1].set_title('Data dari Koordinat Random Grid (RG)', fontproperties=p_regular, fontsize=13)
axes[1].set_xlabel('Nilai DCI', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[1].set_ylabel('')

# Hitung jumlah per bin
for p in hist2.patches:
    height = p.get_height()
    if height > 0:
        axes[1].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[1].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[1].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

# Histogram file 3
axes[2].set_title('Data dari Koordinat Random Uniform (RU)', fontproperties=p_regular, fontsize=13)
axes[2].set_xlabel('Nilai DCI', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[2].set_ylabel('')

# Hitung jumlah per bin
for p in hist3.patches:
    height = p.get_height()
    if height > 0:
        axes[2].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[2].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[2].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

'''axes[0].set_xlim(0, 300)
axes[1].set_xlim(30, 270)
axes[2].set_xlim(30, 270)'''

for ax in axes:
    ax.set_ylim(0, max_y_val + 10)
    ax.xaxis.set_minor_locator(AutoMinorLocator(4))
    ax.yaxis.set_minor_locator(AutoMinorLocator(4))
    ax.tick_params(axis='x', which='minor', length=4, color='black')
    ax.tick_params(axis='y', which='minor', length=4, color='black')

# Layout histogram
plt.suptitle(
    'Perbandingan Nilai DCI dari Ketiga Koordinat \nGabungan Wilayah 1, 2, dan 3',
    y=1.05, fontproperties=p_semibold, fontsize=14)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 1
box_x_start = axes[1].get_position().xmin-.05
box_x_end = axes[2].get_position().xmax+.095
box_y_start = axes[1].get_position().ymin
box_y_end = axes[1].get_position().ymax+.01

rect = Rectangle(
    (box_x_start, box_y_start),
    box_x_end - box_x_start,
    box_y_end - box_y_start,
    linewidth=1.5,
    edgecolor='#f47478',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start + box_x_end) / 2
box_title_y = box_y_end + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 2
box_x_start2 = axes[0].get_position().xmin-.102
box_x_end2 = axes[0].get_position().xmax-.015
box_y_start2 = axes[0].get_position().ymin
box_y_end2 = axes[0].get_position().ymax+.01

rect = Rectangle(
    (box_x_start2, box_y_start2),
    box_x_end2 - box_x_start2,
    box_y_end2 - box_y_start2,
    linewidth=1.5,
    edgecolor='#7474f8',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start2 + box_x_end2) / 2
box_title_y = box_y_end2 + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

plt.tight_layout()
plt.subplots_adjust(wspace=0.2)
plt.savefig(f'DCI seluruh.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

#_______________________________________________________________________________________________________________________________________#
print('')

# Ekstrak KDE
kde_dss = sns.kdeplot(df1['Extracted_Value'], bw_adjust=1).get_lines()[0].get_data()
kde_rg = sns.kdeplot(df2['Extracted_Value'], bw_adjust=1).get_lines()[1].get_data()
kde_ru = sns.kdeplot(df3['Extracted_Value'], bw_adjust=1).get_lines()[2].get_data()
plt.close()

# Plot KDE
plt.figure(figsize=(7, 5))
plt.plot(kde_dss[0], kde_dss[1], label='DSS', color='blue')
plt.plot(kde_rg[0], kde_rg[1], label='Random Grid (RG)', color='red')
plt.plot(kde_ru[0], kde_ru[1], label='Random Uniform (RU)', color='green')

plt.title('Perbandingan KDE dari Koordinat DSS, RG, and RU', fontsize=10)
plt.xlabel('Nilai DCI', fontsize=11)
plt.ylabel('Densitas', fontsize=11)
plt.legend(fontsize=10)
plt.grid(True)
#plt.xlim(0.1, 0.45)

plt.gca().xaxis.set_minor_locator(MultipleLocator(0.05))
plt.gca().yaxis.set_minor_locator(MultipleLocator(0.02))

plt.minorticks_on()

plt.gca().xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
plt.gca().yaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))

plt.gca().tick_params(axis='x', which='minor', color='black')
plt.gca().tick_params(axis='y', which='minor', color='black')

plt.savefig(f'DCI KDE.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

"""# **Water Vapour Histogram**

## **Water Vapour Histogram - region 1**

----------------------------------------
"""

# Direktori File
df1 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_DSS_WaterVap_all_1.xlsx')
df2 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_grid_WaterVap_all_1.xlsx')
df3 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_uniform_WaterVap_all_1.xlsx')

# Min, Max, Std
min_val1, max_val1, std_val1, ave_val1 = df1['Extracted_Value'].min(), df1['Extracted_Value'].max(), df1['Extracted_Value'].std(), df1['Extracted_Value'].mean()
min_val2, max_val2, std_val2, ave_val2 = df2['Extracted_Value'].min(), df2['Extracted_Value'].max(), df2['Extracted_Value'].std(), df2['Extracted_Value'].mean()
min_val3, max_val3, std_val3, ave_val3 = df3['Extracted_Value'].min(), df3['Extracted_Value'].max(), df3['Extracted_Value'].std(), df3['Extracted_Value'].mean()

#_______________________________________________________________________________________________________________________________________#

# Ubah titik ke koma
def indonesia_format_koma(num):
    return f"{num:,.5f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def indonesian_format(x, pos=None):
    return f"{x:,.4f}".replace(',', 'X').replace('.', ',').replace('X', '.')

# Ubah format min, max, std ke koma
min_val1, max_val1, std_val1, ave_val1 = indonesia_format_koma(min_val1), indonesia_format_koma(max_val1), indonesia_format_koma(std_val1), indonesia_format_koma(ave_val1)
min_val2, max_val2, std_val2, ave_val2 = indonesia_format_koma(min_val2), indonesia_format_koma(max_val2), indonesia_format_koma(std_val2), indonesia_format_koma(ave_val2)
min_val3, max_val3, std_val3, ave_val3 = indonesia_format_koma(min_val3), indonesia_format_koma(max_val3), indonesia_format_koma(std_val3), indonesia_format_koma(ave_val3)

#_______________________________________________________________________________________________________________________________________#

# SNS Plot
#sns.set(style="whitegrid")
fig, axes = plt.subplots(1, 3, figsize=(16, 6.7), sharey=True)

#_______________________________________________________________________________________________________________________________________#

# Hist
hist1 = sns.histplot(data=df1, x='Extracted_Value', bins=20, kde=True, color='blue',
                     ax=axes[0],
                     label=f'Min={min_val1}    Max={max_val1}    Std={std_val1}    Ave={ave_val1}')

hist2 = sns.histplot(data=df2, x='Extracted_Value', bins=20, kde=True, color='red',
                     ax=axes[1],
                     label=f'Min={min_val2}    Max={max_val2}    Std={std_val2}    Ave={ave_val2}')

hist3 = sns.histplot(data=df3, x='Extracted_Value', bins='auto', kde=True, color='green',
                     ax=axes[2],
                     label=f'Min={min_val3}    Max={max_val3}    Std={std_val3}    Ave={ave_val3}')

max_y_val = max(max([p.get_height() for p in hist1.patches]),
                max([p.get_height() for p in hist2.patches]),
                max([p.get_height() for p in hist3.patches]))

# Set properti legenda
axes[0].legend(loc='center', bbox_to_anchor=(0.5, -0.3), handlelength=0, handletextpad=0, prop=p_regular)
axes[1].legend(loc='center', bbox_to_anchor=(0.5, -0.3), handlelength=0, handletextpad=0, prop=p_regular)
axes[2].legend(loc='center', bbox_to_anchor=(0.5, -0.3), handlelength=0, handletextpad=0, prop=p_regular)

# Nampilin semua y-label
axes[0].tick_params(labelleft=True)
axes[1].tick_params(labelleft=True)
axes[2].tick_params(labelleft=True)

# Set y dari nilai tertinggi
axes[0].set_ylim(0, max_y_val + 5)
axes[1].set_ylim(0, max_y_val + 5)
axes[2].set_ylim(0, max_y_val + 5)

#_______________________________________________________________________________________________________________________________________#

# Histogram file 1
axes[0].set_title('Data dari Koordinat DSS', fontproperties=p_regular, fontsize=13)
axes[0].set_xlabel('Nilai Water Vapour (kg m$^{-2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[0].set_ylabel('Banyak data', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[0].tick_params(axis='x', rotation=35)

# Hitung jumlah per bin
for p in hist1.patches:
    height = p.get_height()
    if height > 0:
        axes[0].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[0].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))

#_______________________________________________________________________________________________________________________________________#

# Histogram file 2
axes[1].set_title('Data dari Koordinat Random Grid (RG)', fontproperties=p_regular, fontsize=13)
axes[1].set_xlabel('Nilai Water Vapour (kg m$^{-2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[1].set_ylabel('')
axes[1].tick_params(axis='x', rotation=35)

# Hitung jumlah per bin
for p in hist2.patches:
    height = p.get_height()
    if height > 0:
        axes[1].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[1].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[1].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

# Histogram file 3
axes[2].set_title('Data dari Koordinat Random Uniform (RU)', fontproperties=p_regular, fontsize=13)
axes[2].set_xlabel('Nilai Water Vapour (kg m$^{-2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[2].set_ylabel('')
axes[2].tick_params(axis='x', rotation=35)

# Hitung jumlah per bin
for p in hist3.patches:
    height = p.get_height()
    if height > 0:
        axes[2].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[2].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[2].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

axes[0].set_xlim(0.012, 0.020)
axes[1].set_xlim(0.013, 0.018)
axes[2].set_xlim(0.014, 0.021)

for ax in axes:
    ax.set_ylim(0, max_y_val + 10)
    ax.xaxis.set_minor_locator(AutoMinorLocator(4))
    ax.yaxis.set_minor_locator(AutoMinorLocator(4))
    ax.tick_params(axis='x', which='minor', length=4, color='black')
    ax.tick_params(axis='y', which='minor', length=4, color='black')

# Layout histogram
plt.suptitle(
    'Perbandingan Nilai Water Vapour dari Ketiga Koordinat \nWilayah 1 - (Olympus Mons dan Amazonis Planitia)',
    y=1.05, fontproperties=p_semibold, fontsize=14)
plt.figtext(0.5, 0.946, '30°LU - 10°LS dan 140°BB - 170°BB', fontsize=12, ha='center', fontproperties=p_medium)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 1
box_x_start = axes[1].get_position().xmin-.055
box_x_end = axes[2].get_position().xmax+.095
box_y_start = axes[1].get_position().ymin+.035
box_y_end = axes[1].get_position().ymax+.01

rect = Rectangle(
    (box_x_start, box_y_start),
    box_x_end - box_x_start,
    box_y_end - box_y_start,
    linewidth=1.5,
    edgecolor='#f47478',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start + box_x_end) / 2
box_title_y = box_y_end + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 2
box_x_start2 = axes[0].get_position().xmin-.102
box_x_end2 = axes[0].get_position().xmax-.015
box_y_start2 = axes[0].get_position().ymin+.035
box_y_end2 = axes[0].get_position().ymax+.01

rect = Rectangle(
    (box_x_start2, box_y_start2),
    box_x_end2 - box_x_start2,
    box_y_end2 - box_y_start2,
    linewidth=1.5,
    edgecolor='#7474f8',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start2 + box_x_end2) / 2
box_title_y = box_y_end2 + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

plt.tight_layout()
plt.subplots_adjust(wspace=0.2)
plt.savefig(f'WV 1.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

"""## **Water Vapour Histogram - region 2**

----------------------------------------
"""

# Direktori File
df1 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_DSS_WaterVap_all_2.xlsx')
df2 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_grid_WaterVap_all_2.xlsx')
df3 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_uniform_WaterVap_all_2.xlsx')

# Min, Max, Std
min_val1, max_val1, std_val1, ave_val1 = df1['Extracted_Value'].min(), df1['Extracted_Value'].max(), df1['Extracted_Value'].std(), df1['Extracted_Value'].mean()
min_val2, max_val2, std_val2, ave_val2 = df2['Extracted_Value'].min(), df2['Extracted_Value'].max(), df2['Extracted_Value'].std(), df2['Extracted_Value'].mean()
min_val3, max_val3, std_val3, ave_val3 = df3['Extracted_Value'].min(), df3['Extracted_Value'].max(), df3['Extracted_Value'].std(), df3['Extracted_Value'].mean()

#_______________________________________________________________________________________________________________________________________#

# Ubah titik ke koma
def indonesia_format_koma(num):
    return f"{num:,.5f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def indonesian_format(x, pos=None):
    return f"{x:,.4f}".replace(',', 'X').replace('.', ',').replace('X', '.')

# Ubah format min, max, std ke koma
min_val1, max_val1, std_val1, ave_val1 = indonesia_format_koma(min_val1), indonesia_format_koma(max_val1), indonesia_format_koma(std_val1), indonesia_format_koma(ave_val1)
min_val2, max_val2, std_val2, ave_val2 = indonesia_format_koma(min_val2), indonesia_format_koma(max_val2), indonesia_format_koma(std_val2), indonesia_format_koma(ave_val2)
min_val3, max_val3, std_val3, ave_val3 = indonesia_format_koma(min_val3), indonesia_format_koma(max_val3), indonesia_format_koma(std_val3), indonesia_format_koma(ave_val3)

#_______________________________________________________________________________________________________________________________________#

# SNS Plot
#sns.set(style="whitegrid")
fig, axes = plt.subplots(1, 3, figsize=(16, 6.7), sharey=True)

#_______________________________________________________________________________________________________________________________________#

# Hist
hist1 = sns.histplot(data=df1, x='Extracted_Value', bins=20, kde=True, color='blue',
                     ax=axes[0],
                     label=f'Min={min_val1}    Max={max_val1}    Std={std_val1}    Ave={ave_val1}')

hist2 = sns.histplot(data=df2, x='Extracted_Value', bins=20, kde=True, color='red',
                     ax=axes[1],
                     label=f'Min={min_val2}    Max={max_val2}    Std={std_val2}    Ave={ave_val2}')

hist3 = sns.histplot(data=df3, x='Extracted_Value', bins=18, kde=True, color='green',
                     ax=axes[2],
                     label=f'Min={min_val3}    Max={max_val3}    Std={std_val3}    Ave={ave_val3}')

max_y_val = max(max([p.get_height() for p in hist1.patches]),
                max([p.get_height() for p in hist2.patches]),
                max([p.get_height() for p in hist3.patches]))

# Set properti legenda
axes[0].legend(loc='center', bbox_to_anchor=(0.5, -0.3), handlelength=0, handletextpad=0, prop=p_regular)
axes[1].legend(loc='center', bbox_to_anchor=(0.5, -0.3), handlelength=0, handletextpad=0, prop=p_regular)
axes[2].legend(loc='center', bbox_to_anchor=(0.5, -0.3), handlelength=0, handletextpad=0, prop=p_regular)

# Nampilin semua y-label
axes[0].tick_params(labelleft=True)
axes[1].tick_params(labelleft=True)
axes[2].tick_params(labelleft=True)

# Set y dari nilai tertinggi
axes[0].set_ylim(0, max_y_val + 5)
axes[1].set_ylim(0, max_y_val + 5)
axes[2].set_ylim(0, max_y_val + 5)

#_______________________________________________________________________________________________________________________________________#

# Histogram file 1
axes[0].set_title('Data dari Koordinat DSS', fontproperties=p_regular, fontsize=13)
axes[0].set_xlabel('Nilai Water Vapour (kg m$^{-2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[0].set_ylabel('Banyak data', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[0].tick_params(axis='x', rotation=35)

# Hitung jumlah per bin
for p in hist1.patches:
    height = p.get_height()
    if height > 0:
        axes[0].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[0].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))

#_______________________________________________________________________________________________________________________________________#

# Histogram file 2
axes[1].set_title('Data dari Koordinat Random Grid (RG)', fontproperties=p_regular, fontsize=13)
axes[1].set_xlabel('Nilai Water Vapour (kg m$^{-2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[1].set_ylabel('')
axes[1].tick_params(axis='x', rotation=35)

# Hitung jumlah per bin
for p in hist2.patches:
    height = p.get_height()
    if height > 0:
        axes[1].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[1].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[1].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

# Histogram file 3
axes[2].set_title('Data dari Koordinat Random Uniform (RU)', fontproperties=p_regular, fontsize=13)
axes[2].set_xlabel('Nilai Water Vapour (kg m$^{-2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[2].set_ylabel('')
axes[2].tick_params(axis='x', rotation=35)

# Hitung jumlah per bin
for p in hist3.patches:
    height = p.get_height()
    if height > 0:
        axes[2].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[2].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[2].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

axes[0].set_xlim(0.011, 0.021)
axes[1].set_xlim(0.014, 0.018)
axes[2].set_xlim(0.015, 0.020)

for ax in axes:
    ax.set_ylim(0, max_y_val + 10)
    ax.xaxis.set_minor_locator(AutoMinorLocator(4))
    ax.yaxis.set_minor_locator(AutoMinorLocator(4))
    ax.tick_params(axis='x', which='minor', length=4, color='black')
    ax.tick_params(axis='y', which='minor', length=4, color='black')

# Layout histogram
plt.suptitle(
    'Perbandingan Nilai Water Vapour dari Ketiga Koordinat \nWilayah 2 - (Arabia Terra, Chryse Planitia, dan Ares Valis)',
    y=1.05, fontproperties=p_semibold, fontsize=14)
plt.figtext(0.5, 0.946, '30°LU - 10°LS dan 10°BT - 50°BB', fontsize=12, ha='center', fontproperties=p_medium)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 1
box_x_start = axes[1].get_position().xmin-.055
box_x_end = axes[2].get_position().xmax+.095
box_y_start = axes[1].get_position().ymin+.035
box_y_end = axes[1].get_position().ymax+.01

rect = Rectangle(
    (box_x_start, box_y_start),
    box_x_end - box_x_start,
    box_y_end - box_y_start,
    linewidth=1.5,
    edgecolor='#f47478',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start + box_x_end) / 2
box_title_y = box_y_end + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 2
box_x_start2 = axes[0].get_position().xmin-.102
box_x_end2 = axes[0].get_position().xmax-.015
box_y_start2 = axes[0].get_position().ymin+.035
box_y_end2 = axes[0].get_position().ymax+.01

rect = Rectangle(
    (box_x_start2, box_y_start2),
    box_x_end2 - box_x_start2,
    box_y_end2 - box_y_start2,
    linewidth=1.5,
    edgecolor='#7474f8',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start2 + box_x_end2) / 2
box_title_y = box_y_end2 + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

plt.tight_layout()
plt.subplots_adjust(wspace=0.2)
plt.savefig(f'WV 2.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

"""## **Water Vapour Histogram - region 3**

----------------------------------------
"""

# Direktori File
df1 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_DSS_WaterVap_all_3.xlsx')
df2 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_grid_WaterVap_all_3.xlsx')
df3 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_uniform_WaterVap_all_3.xlsx')

# Min, Max, Std
min_val1, max_val1, std_val1, ave_val1 = df1['Extracted_Value'].min(), df1['Extracted_Value'].max(), df1['Extracted_Value'].std(), df1['Extracted_Value'].mean()
min_val2, max_val2, std_val2, ave_val2 = df2['Extracted_Value'].min(), df2['Extracted_Value'].max(), df2['Extracted_Value'].std(), df2['Extracted_Value'].mean()
min_val3, max_val3, std_val3, ave_val3 = df3['Extracted_Value'].min(), df3['Extracted_Value'].max(), df3['Extracted_Value'].std(), df3['Extracted_Value'].mean()

#_______________________________________________________________________________________________________________________________________#

# Ubah titik ke koma
def indonesia_format_koma(num):
    return f"{num:,.5f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def indonesian_format(x, pos=None):
    return f"{x:,.4f}".replace(',', 'X').replace('.', ',').replace('X', '.')

# Ubah format min, max, std ke koma
min_val1, max_val1, std_val1, ave_val1 = indonesia_format_koma(min_val1), indonesia_format_koma(max_val1), indonesia_format_koma(std_val1), indonesia_format_koma(ave_val1)
min_val2, max_val2, std_val2, ave_val2 = indonesia_format_koma(min_val2), indonesia_format_koma(max_val2), indonesia_format_koma(std_val2), indonesia_format_koma(ave_val2)
min_val3, max_val3, std_val3, ave_val3 = indonesia_format_koma(min_val3), indonesia_format_koma(max_val3), indonesia_format_koma(std_val3), indonesia_format_koma(ave_val3)

#_______________________________________________________________________________________________________________________________________#

# SNS Plot
#sns.set(style="whitegrid")
fig, axes = plt.subplots(1, 3, figsize=(16, 6.7), sharey=True)

#_______________________________________________________________________________________________________________________________________#

# Hist
hist1 = sns.histplot(data=df1, x='Extracted_Value', bins='auto', kde=True, color='blue',
                     ax=axes[0],
                     label=f'Min={min_val1}    Max={max_val1}    Std={std_val1}    Ave={ave_val1}')

hist2 = sns.histplot(data=df2, x='Extracted_Value', bins='auto', kde=True, color='red',
                     ax=axes[1],
                     label=f'Min={min_val2}    Max={max_val2}    Std={std_val2}    Ave={ave_val2}')

hist3 = sns.histplot(data=df3, x='Extracted_Value', bins='auto', kde=True, color='green',
                     ax=axes[2],
                     label=f'Min={min_val3}    Max={max_val3}    Std={std_val3}    Ave={ave_val3}')

max_y_val = max(max([p.get_height() for p in hist1.patches]),
                max([p.get_height() for p in hist2.patches]),
                max([p.get_height() for p in hist3.patches]))

# Set properti legenda
axes[0].legend(loc='center', bbox_to_anchor=(0.5, -0.3), handlelength=0, handletextpad=0, prop=p_regular)
axes[1].legend(loc='center', bbox_to_anchor=(0.5, -0.3), handlelength=0, handletextpad=0, prop=p_regular)
axes[2].legend(loc='center', bbox_to_anchor=(0.5, -0.3), handlelength=0, handletextpad=0, prop=p_regular)

# Nampilin semua y-label
axes[0].tick_params(labelleft=True)
axes[1].tick_params(labelleft=True)
axes[2].tick_params(labelleft=True)

# Set y dari nilai tertinggi
axes[0].set_ylim(0, max_y_val + 5)
axes[1].set_ylim(0, max_y_val + 5)
axes[2].set_ylim(0, max_y_val + 5)

#_______________________________________________________________________________________________________________________________________#

# Histogram file 1
axes[0].set_title('Data dari Koordinat DSS', fontproperties=p_regular, fontsize=13)
axes[0].set_xlabel('Nilai Water Vapour (kg m$^{-2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[0].set_ylabel('Banyak data', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[0].tick_params(axis='x', rotation=35)

# Hitung jumlah per bin
for p in hist1.patches:
    height = p.get_height()
    if height > 0:
        axes[0].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[0].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))

#_______________________________________________________________________________________________________________________________________#

# Histogram file 2
axes[1].set_title('Data dari Koordinat Random Grid (RG)', fontproperties=p_regular, fontsize=13)
axes[1].set_xlabel('Nilai Water Vapour (kg m$^{-2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[1].set_ylabel('')
axes[1].tick_params(axis='x', rotation=35)

# Hitung jumlah per bin
for p in hist2.patches:
    height = p.get_height()
    if height > 0:
        axes[1].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[1].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[1].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

# Histogram file 3
axes[2].set_title('Data dari Koordinat Random Uniform (RU)', fontproperties=p_regular, fontsize=13)
axes[2].set_xlabel('Nilai Water Vapour (kg m$^{-2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[2].set_ylabel('')
axes[2].tick_params(axis='x', rotation=35)

# Hitung jumlah per bin
for p in hist3.patches:
    height = p.get_height()
    if height > 0:
        axes[2].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[2].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[2].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

axes[0].set_xlim(0.005, 0.026)
axes[1].set_xlim(0.0135, 0.022)
axes[2].set_xlim(0.0135, 0.021)

for ax in axes:
    ax.set_ylim(0, max_y_val + 10)
    ax.xaxis.set_minor_locator(AutoMinorLocator(4))
    ax.yaxis.set_minor_locator(AutoMinorLocator(4))
    ax.tick_params(axis='x', which='minor', length=4, color='black')
    ax.tick_params(axis='y', which='minor', length=4, color='black')

# Layout histogram
plt.suptitle(
    'Perbandingan Nilai Water Vapour dari Ketiga Koordinat \nWilayah 3 - (Tharsis, Elysium Planitia, Utopia Planitia, dan Syrtis Major)',
    y=1.05, fontproperties=p_semibold, fontsize=14)
plt.figtext(0.5, 0.946, '40°LU - 20°LS dan 60°BT - 180°BT', fontsize=12, ha='center', fontproperties=p_medium)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 1
box_x_start = axes[1].get_position().xmin-.055
box_x_end = axes[2].get_position().xmax+.098
box_y_start = axes[1].get_position().ymin+.035
box_y_end = axes[1].get_position().ymax+.01

rect = Rectangle(
    (box_x_start, box_y_start),
    box_x_end - box_x_start,
    box_y_end - box_y_start,
    linewidth=1.5,
    edgecolor='#f47478',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start + box_x_end) / 2
box_title_y = box_y_end + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 2
box_x_start2 = axes[0].get_position().xmin-.102
box_x_end2 = axes[0].get_position().xmax-.015
box_y_start2 = axes[0].get_position().ymin+.035
box_y_end2 = axes[0].get_position().ymax+.01

rect = Rectangle(
    (box_x_start2, box_y_start2),
    box_x_end2 - box_x_start2,
    box_y_end2 - box_y_start2,
    linewidth=1.5,
    edgecolor='#7474f8',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start2 + box_x_end2) / 2
box_title_y = box_y_end2 + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

plt.tight_layout()
plt.subplots_adjust(wspace=0.2)
plt.savefig(f'WV 3.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

"""## **Water Vapour Histogram - All Regions**

----------------------------------------
"""

# Direktori File
df1 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Combine Result/combined_WaterVap_all.xlsx')
df2 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Combine Result/combined_random_grid_WaterVap_all.xlsx')
df3 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Combine Result/combined_random_uniform_WaterVap_all.xlsx')

# Min, Max, Std
min_val1, max_val1, std_val1, ave_val1 = df1['Extracted_Value'].min(), df1['Extracted_Value'].max(), df1['Extracted_Value'].std(), df1['Extracted_Value'].mean()
min_val2, max_val2, std_val2, ave_val2 = df2['Extracted_Value'].min(), df2['Extracted_Value'].max(), df2['Extracted_Value'].std(), df2['Extracted_Value'].mean()
min_val3, max_val3, std_val3, ave_val3 = df3['Extracted_Value'].min(), df3['Extracted_Value'].max(), df3['Extracted_Value'].std(), df3['Extracted_Value'].mean()

#_______________________________________________________________________________________________________________________________________#

# Ubah titik ke koma
def indonesia_format_koma(num):
    return f"{num:,.5f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def indonesian_format(x, pos=None):
    return f"{x:,.4f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def indonesian_format2(x, pos=None):
    return f"{x:,.0f}".replace(',', 'X').replace('.', ',').replace('X', '.')

# Ubah format min, max, std ke koma
min_val1, max_val1, std_val1, ave_val1 = indonesia_format_koma(min_val1), indonesia_format_koma(max_val1), indonesia_format_koma(std_val1), indonesia_format_koma(ave_val1)
min_val2, max_val2, std_val2, ave_val2 = indonesia_format_koma(min_val2), indonesia_format_koma(max_val2), indonesia_format_koma(std_val2), indonesia_format_koma(ave_val2)
min_val3, max_val3, std_val3, ave_val3 = indonesia_format_koma(min_val3), indonesia_format_koma(max_val3), indonesia_format_koma(std_val3), indonesia_format_koma(ave_val3)

#_______________________________________________________________________________________________________________________________________#

# SNS Plot
#sns.set(style="whitegrid")
fig, axes = plt.subplots(1, 3, figsize=(16, 6.7), sharey=True)

#_______________________________________________________________________________________________________________________________________#

# Hist
hist1 = sns.histplot(data=df1, x='Extracted_Value', bins='auto', kde=True, color='blue',
                     ax=axes[0],
                     label=f'Min={min_val1}    Max={max_val1}    Std={std_val1}    Ave={ave_val1}')

hist2 = sns.histplot(data=df2, x='Extracted_Value', bins='auto', kde=True, color='red',
                     ax=axes[1],
                     label=f'Min={min_val2}    Max={max_val2}    Std={std_val2}    Ave={ave_val2}')

hist3 = sns.histplot(data=df3, x='Extracted_Value', bins='auto', kde=True, color='green',
                     ax=axes[2],
                     label=f'Min={min_val3}    Max={max_val3}    Std={std_val3}    Ave={ave_val3}')

max_y_val = max(max([p.get_height() for p in hist1.patches]),
                max([p.get_height() for p in hist2.patches]),
                max([p.get_height() for p in hist3.patches]))

# Set properti legenda
axes[0].legend(loc='center', bbox_to_anchor=(0.5, -0.3), handlelength=0, handletextpad=0, prop=p_regular)
axes[1].legend(loc='center', bbox_to_anchor=(0.5, -0.3), handlelength=0, handletextpad=0, prop=p_regular)
axes[2].legend(loc='center', bbox_to_anchor=(0.5, -0.3), handlelength=0, handletextpad=0, prop=p_regular)

# Nampilin semua y-label
axes[0].tick_params(labelleft=True)
axes[1].tick_params(labelleft=True)
axes[2].tick_params(labelleft=True)

# Set y dari nilai tertinggi
axes[0].set_ylim(0, max_y_val + 5)
axes[1].set_ylim(0, max_y_val + 5)
axes[2].set_ylim(0, max_y_val + 5)

#_______________________________________________________________________________________________________________________________________#

# Histogram file 1
axes[0].set_title('Data dari Koordinat DSS', fontproperties=p_regular, fontsize=13)
axes[0].set_xlabel('Nilai Water Vapour (kg m$^{-2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[0].set_ylabel('Banyak data', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[0].tick_params(axis='x', rotation=35)

# Hitung jumlah per bin
for p in hist1.patches:
    height = p.get_height()
    if height > 0:
        axes[0].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[0].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))

#_______________________________________________________________________________________________________________________________________#

# Histogram file 2
axes[1].set_title('Data dari Koordinat Random Grid (RG)', fontproperties=p_regular, fontsize=13)
axes[1].set_xlabel('Nilai Water Vapour (kg m$^{-2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[1].set_ylabel('')
axes[1].tick_params(axis='x', rotation=35)

# Hitung jumlah per bin
for p in hist2.patches:
    height = p.get_height()
    if height > 0:
        axes[1].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[1].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[1].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

# Histogram file 3
axes[2].set_title('Data dari Koordinat Random Uniform (RU)', fontproperties=p_regular, fontsize=13)
axes[2].set_xlabel('Nilai Water Vapour (kg m$^{-2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[2].set_ylabel('')
axes[2].tick_params(axis='x', rotation=35)

# Hitung jumlah per bin
for p in hist3.patches:
    height = p.get_height()
    if height > 0:
        axes[2].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[2].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[2].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

axes[0].set_xlim(0.005, 0.026)
axes[1].set_xlim(0.013, 0.022)
axes[2].set_xlim(0.014, 0.021)

for ax in axes:
    ax.set_ylim(0, max_y_val + 10)
    ax.xaxis.set_minor_locator(AutoMinorLocator(4))
    ax.yaxis.set_minor_locator(AutoMinorLocator(4))
    ax.tick_params(axis='x', which='minor', length=4, color='black')
    ax.tick_params(axis='y', which='minor', length=4, color='black')

# Layout histogram
plt.suptitle(
    'Perbandingan Nilai Water Vapour dari Ketiga Koordinat \nGabungan Wilayah 1, 2, dan 3',
    y=1.05, fontproperties=p_semibold, fontsize=14)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 1
box_x_start = axes[1].get_position().xmin-.055
box_x_end = axes[2].get_position().xmax+.098
box_y_start = axes[1].get_position().ymin+.035
box_y_end = axes[1].get_position().ymax+.01

rect = Rectangle(
    (box_x_start, box_y_start),
    box_x_end - box_x_start,
    box_y_end - box_y_start,
    linewidth=1.5,
    edgecolor='#f47478',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start + box_x_end) / 2
box_title_y = box_y_end + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 2
box_x_start2 = axes[0].get_position().xmin-.102
box_x_end2 = axes[0].get_position().xmax-.015
box_y_start2 = axes[0].get_position().ymin+.035
box_y_end2 = axes[0].get_position().ymax+.01

rect = Rectangle(
    (box_x_start2, box_y_start2),
    box_x_end2 - box_x_start2,
    box_y_end2 - box_y_start2,
    linewidth=1.5,
    edgecolor='#7474f8',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start2 + box_x_end2) / 2
box_title_y = box_y_end2 + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

plt.tight_layout()
plt.subplots_adjust(wspace=0.2)
plt.savefig(f'WV seluruh.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

#_______________________________________________________________________________________________________________________________________#
print('')

# Ekstrak KDE
kde_dss = sns.kdeplot(df1['Extracted_Value'], bw_adjust=1).get_lines()[0].get_data()
kde_rg = sns.kdeplot(df2['Extracted_Value'], bw_adjust=1).get_lines()[1].get_data()
kde_ru = sns.kdeplot(df3['Extracted_Value'], bw_adjust=1).get_lines()[2].get_data()
plt.close()

# Plot KDE
plt.figure(figsize=(7, 5))
plt.plot(kde_dss[0], kde_dss[1], label='DSS', color='blue')
plt.plot(kde_rg[0], kde_rg[1], label='Random Grid (RG)', color='red')
plt.plot(kde_ru[0], kde_ru[1], label='Random Uniform (RU)', color='green')

plt.title('Perbandingan KDE dari Koordinat DSS, RG, and RU', fontsize=10)
plt.xlabel('Nilai Water Vapour', fontsize=11)
plt.ylabel('Densitas Nilai', fontsize=11)
plt.legend(fontsize=10)
plt.grid(True)
#plt.xlim(0.1, 0.45)

plt.gca().xaxis.set_minor_locator(MultipleLocator(0.05))
plt.gca().yaxis.set_minor_locator(MultipleLocator(0.02))

plt.minorticks_on()

plt.gca().xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
plt.gca().yaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format2))

plt.gca().tick_params(axis='x', which='minor', color='black')
plt.gca().tick_params(axis='y', which='minor', color='black')

plt.savefig(f'WV KDE.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

"""# **Slope Histogram**

## **Slope Histogram - region 1**

----------------------------------------
"""

# Direktori File
df1 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_DSS_slope_1.xlsx')
df2 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_grid_slope_1.xlsx')
df3 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_uniform_slope_1.xlsx')

# Min, Max, Std
min_val1, max_val1, std_val1, ave_val1 = df1['Extracted_Value'].min(), df1['Extracted_Value'].max(), df1['Extracted_Value'].std(), df1['Extracted_Value'].mean()
min_val2, max_val2, std_val2, ave_val2 = df2['Extracted_Value'].min(), df2['Extracted_Value'].max(), df2['Extracted_Value'].std(), df2['Extracted_Value'].mean()
min_val3, max_val3, std_val3, ave_val3 = df3['Extracted_Value'].min(), df3['Extracted_Value'].max(), df3['Extracted_Value'].std(), df3['Extracted_Value'].mean()

#_______________________________________________________________________________________________________________________________________#

# Ubah titik ke koma
def indonesia_format_koma(num):
    return f"{num:,.3f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def indonesian_format(x, pos=None):
    return f"{x:,.1f}".replace(',', 'X').replace('.', ',').replace('X', '.')

# Ubah format min, max, std ke koma
min_val1, max_val1, std_val1, ave_val1 = indonesia_format_koma(min_val1), indonesia_format_koma(max_val1), indonesia_format_koma(std_val1), indonesia_format_koma(ave_val1)
min_val2, max_val2, std_val2, ave_val2 = indonesia_format_koma(min_val2), indonesia_format_koma(max_val2), indonesia_format_koma(std_val2), indonesia_format_koma(ave_val2)
min_val3, max_val3, std_val3, ave_val3 = indonesia_format_koma(min_val3), indonesia_format_koma(max_val3), indonesia_format_koma(std_val3), indonesia_format_koma(ave_val3)

#_______________________________________________________________________________________________________________________________________#

# SNS Plot
#sns.set(style="whitegrid")
fig, axes = plt.subplots(1, 3, figsize=(16, 6.5), sharey=True)

#_______________________________________________________________________________________________________________________________________#

# Hist
hist1 = sns.histplot(data=df1, x='Extracted_Value', bins='auto', kde=True, color='blue',
                     ax=axes[0],
                     label=f'Min={min_val1}    Max={max_val1}    Std={std_val1}    Ave={ave_val1}')

hist2 = sns.histplot(data=df2, x='Extracted_Value', bins=20, kde=True, color='red',
                     ax=axes[1],
                     label=f'Min={min_val2}    Max={max_val2}    Std={std_val2}    Ave={ave_val2}')

hist3 = sns.histplot(data=df3, x='Extracted_Value', bins=20, kde=True, color='green',
                     ax=axes[2],
                     label=f'Min={min_val3}    Max={max_val3}    Std={std_val3}    Ave={ave_val3}')

max_y_val = max(max([p.get_height() for p in hist1.patches]),
                max([p.get_height() for p in hist2.patches]),
                max([p.get_height() for p in hist3.patches]))

# Set properti legenda
axes[0].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)
axes[1].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)
axes[2].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)

# Nampilin semua y-label
axes[0].tick_params(labelleft=True)
axes[1].tick_params(labelleft=True)
axes[2].tick_params(labelleft=True)

# Set y dari nilai tertinggi
axes[0].set_ylim(0, max_y_val + 5)
axes[1].set_ylim(0, max_y_val + 5)
axes[2].set_ylim(0, max_y_val + 5)

#_______________________________________________________________________________________________________________________________________#

# Histogram file 1
axes[0].set_title('Data dari Koordinat DSS', fontproperties=p_regular, fontsize=13)
axes[0].set_xlabel('Nilai Slope (° derajat)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[0].set_ylabel('Banyak data', fontproperties=p_semibold, fontsize=11, color="#44494a")

# Hitung jumlah per bin
for p in hist1.patches:
    height = p.get_height()
    if height > 0:
        axes[0].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[0].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))

#_______________________________________________________________________________________________________________________________________#

# Histogram file 2
axes[1].set_title('Data dari Koordinat Random Grid (RG)', fontproperties=p_regular, fontsize=13)
axes[1].set_xlabel('Nilai Slope (° derajat)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[1].set_ylabel('')

# Hitung jumlah per bin
for p in hist2.patches:
    height = p.get_height()
    if height > 0:
        axes[1].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[1].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[1].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

# Histogram file 3
axes[2].set_title('Data dari Koordinat Random Uniform (RU)', fontproperties=p_regular, fontsize=13)
axes[2].set_xlabel('Nilai Slope (° derajat)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[2].set_ylabel('')

# Hitung jumlah per bin
for p in hist3.patches:
    height = p.get_height()
    if height > 0:
        axes[2].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[2].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[2].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

axes[0].set_xlim(0, 14)
axes[1].set_xlim(0, 8)
axes[2].set_xlim(0, 8)

for ax in axes:
    ax.set_ylim(0, max_y_val + 5)
    ax.xaxis.set_minor_locator(AutoMinorLocator(4))
    ax.yaxis.set_minor_locator(AutoMinorLocator(4))
    ax.tick_params(axis='x', which='minor', length=4, color='black')
    ax.tick_params(axis='y', which='minor', length=4, color='black')

# Layout histogram
plt.suptitle(
    'Perbandingan Nilai Slope dari Ketiga Koordinat \nWilayah 1 - (Olympus Mons dan Amazonis Planitia)',
    y=1.05, fontproperties=p_semibold, fontsize=14)
plt.figtext(0.5, 0.94, '30°LU - 10°LS dan 140°BB - 170°BB', fontsize=12, ha='center', fontproperties=p_medium)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 1
box_x_start = axes[1].get_position().xmin-.055
box_x_end = axes[2].get_position().xmax+.095
box_y_start = axes[1].get_position().ymin+.01
box_y_end = axes[1].get_position().ymax+.01

rect = Rectangle(
    (box_x_start, box_y_start),
    box_x_end - box_x_start,
    box_y_end - box_y_start,
    linewidth=1.5,
    edgecolor='#f47478',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start + box_x_end) / 2
box_title_y = box_y_end + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 2
box_x_start2 = axes[0].get_position().xmin-.102
box_x_end2 = axes[0].get_position().xmax-.015
box_y_start2 = axes[0].get_position().ymin+.01
box_y_end2 = axes[0].get_position().ymax+.01

rect = Rectangle(
    (box_x_start2, box_y_start2),
    box_x_end2 - box_x_start2,
    box_y_end2 - box_y_start2,
    linewidth=1.5,
    edgecolor='#7474f8',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start2 + box_x_end2) / 2
box_title_y = box_y_end2 + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

plt.tight_layout()
plt.subplots_adjust(wspace=0.2)
plt.savefig(f'slope 1.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

"""## **Slope Histogram - region 2**

----------------------------------------
"""

# Direktori File
df1 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_DSS_slope_2.xlsx')
df2 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_grid_slope_2.xlsx')
df3 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_uniform_slope_2.xlsx')

# Min, Max, Std
min_val1, max_val1, std_val1, ave_val1 = df1['Extracted_Value'].min(), df1['Extracted_Value'].max(), df1['Extracted_Value'].std(), df1['Extracted_Value'].mean()
min_val2, max_val2, std_val2, ave_val2 = df2['Extracted_Value'].min(), df2['Extracted_Value'].max(), df2['Extracted_Value'].std(), df2['Extracted_Value'].mean()
min_val3, max_val3, std_val3, ave_val3 = df3['Extracted_Value'].min(), df3['Extracted_Value'].max(), df3['Extracted_Value'].std(), df3['Extracted_Value'].mean()

#_______________________________________________________________________________________________________________________________________#

# Ubah titik ke koma
def indonesia_format_koma(num):
    return f"{num:,.3f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def indonesian_format(x, pos=None):
    return f"{x:,.1f}".replace(',', 'X').replace('.', ',').replace('X', '.')

# Ubah format min, max, std ke koma
min_val1, max_val1, std_val1, ave_val1 = indonesia_format_koma(min_val1), indonesia_format_koma(max_val1), indonesia_format_koma(std_val1), indonesia_format_koma(ave_val1)
min_val2, max_val2, std_val2, ave_val2 = indonesia_format_koma(min_val2), indonesia_format_koma(max_val2), indonesia_format_koma(std_val2), indonesia_format_koma(ave_val2)
min_val3, max_val3, std_val3, ave_val3 = indonesia_format_koma(min_val3), indonesia_format_koma(max_val3), indonesia_format_koma(std_val3), indonesia_format_koma(ave_val3)

#_______________________________________________________________________________________________________________________________________#

# SNS Plot
#sns.set(style="whitegrid")
fig, axes = plt.subplots(1, 3, figsize=(16, 6.5), sharey=True)

#_______________________________________________________________________________________________________________________________________#

# Hist
hist1 = sns.histplot(data=df1, x='Extracted_Value', bins='auto', kde=True, color='blue',
                     ax=axes[0],
                     label=f'Min={min_val1}    Max={max_val1}    Std={std_val1}    Ave={ave_val1}')

hist2 = sns.histplot(data=df2, x='Extracted_Value', bins=25, kde=True, color='red',
                     ax=axes[1],
                     label=f'Min={min_val2}    Max={max_val2}    Std={std_val2}    Ave={ave_val2}')

hist3 = sns.histplot(data=df3, x='Extracted_Value', bins=30, kde=True, color='green',
                     ax=axes[2],
                     label=f'Min={min_val3}    Max={max_val3}    Std={std_val3}    Ave={ave_val3}')

max_y_val = max(max([p.get_height() for p in hist1.patches]),
                max([p.get_height() for p in hist2.patches]),
                max([p.get_height() for p in hist3.patches]))

# Set properti legenda
axes[0].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)
axes[1].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)
axes[2].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)

# Nampilin semua y-label
axes[0].tick_params(labelleft=True)
axes[1].tick_params(labelleft=True)
axes[2].tick_params(labelleft=True)

# Set y dari nilai tertinggi
axes[0].set_ylim(0, max_y_val + 5)
axes[1].set_ylim(0, max_y_val + 5)
axes[2].set_ylim(0, max_y_val + 5)

#_______________________________________________________________________________________________________________________________________#

# Histogram file 1
axes[0].set_title('Data dari Koordinat DSS', fontproperties=p_regular, fontsize=13)
axes[0].set_xlabel('Nilai Slope (° derajat)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[0].set_ylabel('Banyak data', fontproperties=p_semibold, fontsize=11, color="#44494a")

# Hitung jumlah per bin
for p in hist1.patches:
    height = p.get_height()
    if height > 0:
        axes[0].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[0].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))

#_______________________________________________________________________________________________________________________________________#

# Histogram file 2
axes[1].set_title('Data dari Koordinat Random Grid (RG)', fontproperties=p_regular, fontsize=13)
axes[1].set_xlabel('Nilai Slope (° derajat)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[1].set_ylabel('')

# Hitung jumlah per bin
for p in hist2.patches:
    height = p.get_height()
    if height > 0:
        axes[1].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[1].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[1].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

# Histogram file 3
axes[2].set_title('Data dari Koordinat Random Uniform (RU)', fontproperties=p_regular, fontsize=13)
axes[2].set_xlabel('Nilai Slope (° derajat)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[2].set_ylabel('')

# Hitung jumlah per bin
for p in hist3.patches:
    height = p.get_height()
    if height > 0:
        axes[2].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[2].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[2].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

axes[0].set_xlim(0, 16)
axes[1].set_xlim(0, 6)
axes[2].set_xlim(0, 10)

for ax in axes:
    ax.set_ylim(0, max_y_val + 5)
    ax.xaxis.set_minor_locator(AutoMinorLocator(4))
    ax.yaxis.set_minor_locator(AutoMinorLocator(4))
    ax.tick_params(axis='x', which='minor', length=4, color='black')
    ax.tick_params(axis='y', which='minor', length=4, color='black')

# Layout histogram
plt.suptitle(
    'Perbandingan Nilai Slope dari Ketiga Koordinat \nWilayah 2 - (Arabia Terra, Chryse Planitia, dan Ares Valis)',
    y=1.05, fontproperties=p_semibold, fontsize=14)
plt.figtext(0.5, 0.94, '30°LU - 10°LS dan 10°BT - 50°BB', fontsize=12, ha='center', fontproperties=p_medium)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 1
box_x_start = axes[1].get_position().xmin-.055
box_x_end = axes[2].get_position().xmax+.095
box_y_start = axes[1].get_position().ymin+.01
box_y_end = axes[1].get_position().ymax+.01

rect = Rectangle(
    (box_x_start, box_y_start),
    box_x_end - box_x_start,
    box_y_end - box_y_start,
    linewidth=1.5,
    edgecolor='#f47478',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start + box_x_end) / 2
box_title_y = box_y_end + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 2
box_x_start2 = axes[0].get_position().xmin-.102
box_x_end2 = axes[0].get_position().xmax-.015
box_y_start2 = axes[0].get_position().ymin+.01
box_y_end2 = axes[0].get_position().ymax+.01

rect = Rectangle(
    (box_x_start2, box_y_start2),
    box_x_end2 - box_x_start2,
    box_y_end2 - box_y_start2,
    linewidth=1.5,
    edgecolor='#7474f8',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start2 + box_x_end2) / 2
box_title_y = box_y_end2 + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

plt.tight_layout()
plt.subplots_adjust(wspace=0.2)
plt.savefig(f'slope 2.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

"""## **Slope Histogram - region 3**

----------------------------------------
"""

# Direktori File
df1 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_DSS_slope_3.xlsx')
df2 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_grid_slope_3.xlsx')
df3 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_uniform_slope_3.xlsx')

# Min, Max, Std
min_val1, max_val1, std_val1, ave_val1 = df1['Extracted_Value'].min(), df1['Extracted_Value'].max(), df1['Extracted_Value'].std(), df1['Extracted_Value'].mean()
min_val2, max_val2, std_val2, ave_val2 = df2['Extracted_Value'].min(), df2['Extracted_Value'].max(), df2['Extracted_Value'].std(), df2['Extracted_Value'].mean()
min_val3, max_val3, std_val3, ave_val3 = df3['Extracted_Value'].min(), df3['Extracted_Value'].max(), df3['Extracted_Value'].std(), df3['Extracted_Value'].mean()

#_______________________________________________________________________________________________________________________________________#

# Ubah titik ke koma
def indonesia_format_koma(num):
    return f"{num:,.3f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def indonesian_format(x, pos=None):
    return f"{x:,.1f}".replace(',', 'X').replace('.', ',').replace('X', '.')

# Ubah format min, max, std ke koma
min_val1, max_val1, std_val1, ave_val1 = indonesia_format_koma(min_val1), indonesia_format_koma(max_val1), indonesia_format_koma(std_val1), indonesia_format_koma(ave_val1)
min_val2, max_val2, std_val2, ave_val2 = indonesia_format_koma(min_val2), indonesia_format_koma(max_val2), indonesia_format_koma(std_val2), indonesia_format_koma(ave_val2)
min_val3, max_val3, std_val3, ave_val3 = indonesia_format_koma(min_val3), indonesia_format_koma(max_val3), indonesia_format_koma(std_val3), indonesia_format_koma(ave_val3)

#_______________________________________________________________________________________________________________________________________#

# SNS Plot
#sns.set(style="whitegrid")
fig, axes = plt.subplots(1, 3, figsize=(16, 6.5), sharey=True)

#_______________________________________________________________________________________________________________________________________#

# Hist
hist1 = sns.histplot(data=df1, x='Extracted_Value', bins=20, kde=True, color='blue',
                     ax=axes[0],
                     label=f'Min={min_val1}    Max={max_val1}    Std={std_val1}    Ave={ave_val1}')

hist2 = sns.histplot(data=df2, x='Extracted_Value', bins=20, kde=True, color='red',
                     ax=axes[1],
                     label=f'Min={min_val2}    Max={max_val2}    Std={std_val2}    Ave={ave_val2}')

hist3 = sns.histplot(data=df3, x='Extracted_Value', bins=20, kde=True, color='green',
                     ax=axes[2],
                     label=f'Min={min_val3}    Max={max_val3}    Std={std_val3}    Ave={ave_val3}')

max_y_val = max(max([p.get_height() for p in hist1.patches]),
                max([p.get_height() for p in hist2.patches]),
                max([p.get_height() for p in hist3.patches]))

# Set properti legenda
axes[0].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)
axes[1].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)
axes[2].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)

# Nampilin semua y-label
axes[0].tick_params(labelleft=True)
axes[1].tick_params(labelleft=True)
axes[2].tick_params(labelleft=True)

# Set y dari nilai tertinggi
axes[0].set_ylim(0, max_y_val + 5)
axes[1].set_ylim(0, max_y_val + 5)
axes[2].set_ylim(0, max_y_val + 5)

#_______________________________________________________________________________________________________________________________________#

# Histogram file 1
axes[0].set_title('Data dari Koordinat DSS', fontproperties=p_regular, fontsize=13)
axes[0].set_xlabel('Nilai Slope (° derajat)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[0].set_ylabel('Banyak data', fontproperties=p_semibold, fontsize=11, color="#44494a")

# Hitung jumlah per bin
for p in hist1.patches:
    height = p.get_height()
    if height > 0:
        axes[0].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[0].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))

#_______________________________________________________________________________________________________________________________________#

# Histogram file 2
axes[1].set_title('Data dari Koordinat Random Grid (RG)', fontproperties=p_regular, fontsize=13)
axes[1].set_xlabel('Nilai Slope (° derajat)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[1].set_ylabel('')

# Hitung jumlah per bin
for p in hist2.patches:
    height = p.get_height()
    if height > 0:
        axes[1].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[1].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[1].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

# Histogram file 3
axes[2].set_title('Data dari Koordinat Random Uniform (RU)', fontproperties=p_regular, fontsize=13)
axes[2].set_xlabel('Nilai Slope (° derajat)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[2].set_ylabel('')

# Hitung jumlah per bin
for p in hist3.patches:
    height = p.get_height()
    if height > 0:
        axes[2].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[2].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[2].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

axes[0].set_xlim(0, 22)
axes[1].set_xlim(0, 8)
axes[2].set_xlim(0, 7)

for ax in axes:
    ax.set_ylim(0, max_y_val + 5)
    ax.xaxis.set_minor_locator(AutoMinorLocator(4))
    ax.yaxis.set_minor_locator(AutoMinorLocator(4))
    ax.tick_params(axis='x', which='minor', length=4, color='black')
    ax.tick_params(axis='y', which='minor', length=4, color='black')

# Layout histogram
plt.suptitle(
    'Perbandingan Nilai Slope dari Ketiga Koordinat \nWilayah 3 - (Tharsis, Elysium Planitia, Utopia Planitia, dan Syrtis Major)',
    y=1.05, fontproperties=p_semibold, fontsize=14)
plt.figtext(0.5, 0.94, '40°LU - 20°LS dan 60°BT - 180°BT', fontsize=12, ha='center', fontproperties=p_medium)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 1
box_x_start = axes[1].get_position().xmin-.055
box_x_end = axes[2].get_position().xmax+.095
box_y_start = axes[1].get_position().ymin+.01
box_y_end = axes[1].get_position().ymax+.01

rect = Rectangle(
    (box_x_start, box_y_start),
    box_x_end - box_x_start,
    box_y_end - box_y_start,
    linewidth=1.5,
    edgecolor='#f47478',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start + box_x_end) / 2
box_title_y = box_y_end + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 2
box_x_start2 = axes[0].get_position().xmin-.102
box_x_end2 = axes[0].get_position().xmax-.015
box_y_start2 = axes[0].get_position().ymin+.01
box_y_end2 = axes[0].get_position().ymax+.01

rect = Rectangle(
    (box_x_start2, box_y_start2),
    box_x_end2 - box_x_start2,
    box_y_end2 - box_y_start2,
    linewidth=1.5,
    edgecolor='#7474f8',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start2 + box_x_end2) / 2
box_title_y = box_y_end2 + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

plt.tight_layout()
plt.subplots_adjust(wspace=0.2)
plt.savefig(f'slope 3.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

"""## **Slope Histogram - All Regions**

----------------------------------------
"""

# Direktori File
df1 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Combine Result/combined_slope.xlsx')
df2 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Combine Result/combined_random_grid_slope.xlsx')
df3 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Combine Result/combined_random_uniform_slope.xlsx')

# Min, Max, Std
min_val1, max_val1, std_val1, ave_val1 = df1['Extracted_Value'].min(), df1['Extracted_Value'].max(), df1['Extracted_Value'].std(), df1['Extracted_Value'].mean()
min_val2, max_val2, std_val2, ave_val2 = df2['Extracted_Value'].min(), df2['Extracted_Value'].max(), df2['Extracted_Value'].std(), df2['Extracted_Value'].mean()
min_val3, max_val3, std_val3, ave_val3 = df3['Extracted_Value'].min(), df3['Extracted_Value'].max(), df3['Extracted_Value'].std(), df3['Extracted_Value'].mean()

#_______________________________________________________________________________________________________________________________________#

# Ubah titik ke koma
def indonesia_format_koma(num):
    return f"{num:,.3f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def indonesian_format(x, pos=None):
    return f"{x:,.1f}".replace(',', 'X').replace('.', ',').replace('X', '.')

# Ubah format min, max, std ke koma
min_val1, max_val1, std_val1, ave_val1 = indonesia_format_koma(min_val1), indonesia_format_koma(max_val1), indonesia_format_koma(std_val1), indonesia_format_koma(ave_val1)
min_val2, max_val2, std_val2, ave_val2 = indonesia_format_koma(min_val2), indonesia_format_koma(max_val2), indonesia_format_koma(std_val2), indonesia_format_koma(ave_val2)
min_val3, max_val3, std_val3, ave_val3 = indonesia_format_koma(min_val3), indonesia_format_koma(max_val3), indonesia_format_koma(std_val3), indonesia_format_koma(ave_val3)

#_______________________________________________________________________________________________________________________________________#

# SNS Plot
#sns.set(style="whitegrid")
fig, axes = plt.subplots(1, 3, figsize=(16, 6.5), sharey=True)

#_______________________________________________________________________________________________________________________________________#

# Hist
hist1 = sns.histplot(data=df1, x='Extracted_Value', bins=20, kde=True, color='blue',
                     ax=axes[0],
                     label=f'Min={min_val1}    Max={max_val1}    Std={std_val1}    Ave={ave_val1}')

hist2 = sns.histplot(data=df2, x='Extracted_Value', bins=20, kde=True, color='red',
                     ax=axes[1],
                     label=f'Min={min_val2}    Max={max_val2}    Std={std_val2}    Ave={ave_val2}')

hist3 = sns.histplot(data=df3, x='Extracted_Value', bins=20, kde=True, color='green',
                     ax=axes[2],
                     label=f'Min={min_val3}    Max={max_val3}    Std={std_val3}    Ave={ave_val3}')

max_y_val = max(max([p.get_height() for p in hist1.patches]),
                max([p.get_height() for p in hist2.patches]),
                max([p.get_height() for p in hist3.patches]))

# Set properti legenda
axes[0].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)
axes[1].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)
axes[2].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)

# Nampilin semua y-label
axes[0].tick_params(labelleft=True)
axes[1].tick_params(labelleft=True)
axes[2].tick_params(labelleft=True)

# Set y dari nilai tertinggi
axes[0].set_ylim(0, max_y_val + 5)
axes[1].set_ylim(0, max_y_val + 5)
axes[2].set_ylim(0, max_y_val + 5)

#_______________________________________________________________________________________________________________________________________#

# Histogram file 1
axes[0].set_title('Data dari Koordinat DSS', fontproperties=p_regular, fontsize=13)
axes[0].set_xlabel('Nilai Slope (° derajat)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[0].set_ylabel('Banyak data', fontproperties=p_semibold, fontsize=11, color="#44494a")

# Hitung jumlah per bin
for p in hist1.patches:
    height = p.get_height()
    if height > 0:
        axes[0].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[0].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))

#_______________________________________________________________________________________________________________________________________#

# Histogram file 2
axes[1].set_title('Data dari Koordinat Random Grid (RG)', fontproperties=p_regular, fontsize=13)
axes[1].set_xlabel('Nilai Slope (° derajat)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[1].set_ylabel('')

# Hitung jumlah per bin
for p in hist2.patches:
    height = p.get_height()
    if height > 0:
        axes[1].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[1].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[1].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

# Histogram file 3
axes[2].set_title('Data dari Koordinat Random Uniform (RU)', fontproperties=p_regular, fontsize=13)
axes[2].set_xlabel('Nilai Slope (° derajat)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[2].set_ylabel('')

# Hitung jumlah per bin
for p in hist3.patches:
    height = p.get_height()
    if height > 0:
        axes[2].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[2].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[2].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

#axes[0].set_xlim(0, 22)
#axes[1].set_xlim(0, 8)
#axes[2].set_xlim(0, 7)

for ax in axes:
    ax.set_ylim(0, max_y_val + 5)
    ax.xaxis.set_minor_locator(AutoMinorLocator(4))
    ax.yaxis.set_minor_locator(AutoMinorLocator(4))
    ax.tick_params(axis='x', which='minor', length=4, color='black')
    ax.tick_params(axis='y', which='minor', length=4, color='black')

# Layout histogram
plt.suptitle(
    'Perbandingan Nilai Slope dari Ketiga Koordinat \nGabungan Wilayah 1, 2, dan 3',
    y=1.05, fontproperties=p_semibold, fontsize=14)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 1
box_x_start = axes[1].get_position().xmin-.055
box_x_end = axes[2].get_position().xmax+.095
box_y_start = axes[1].get_position().ymin+.01
box_y_end = axes[1].get_position().ymax+.01

rect = Rectangle(
    (box_x_start, box_y_start),
    box_x_end - box_x_start,
    box_y_end - box_y_start,
    linewidth=1.5,
    edgecolor='#f47478',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start + box_x_end) / 2
box_title_y = box_y_end + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 2
box_x_start2 = axes[0].get_position().xmin-.102
box_x_end2 = axes[0].get_position().xmax-.015
box_y_start2 = axes[0].get_position().ymin+.01
box_y_end2 = axes[0].get_position().ymax+.01

rect = Rectangle(
    (box_x_start2, box_y_start2),
    box_x_end2 - box_x_start2,
    box_y_end2 - box_y_start2,
    linewidth=1.5,
    edgecolor='#7474f8',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start2 + box_x_end2) / 2
box_title_y = box_y_end2 + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

plt.tight_layout()
plt.subplots_adjust(wspace=0.2)
plt.savefig(f'slope seluruh.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

#_______________________________________________________________________________________________________________________________________#
print('')

# Ekstrak KDE
kde_dss = sns.kdeplot(df1['Extracted_Value'], bw_adjust=1).get_lines()[0].get_data()
kde_rg = sns.kdeplot(df2['Extracted_Value'], bw_adjust=1).get_lines()[1].get_data()
kde_ru = sns.kdeplot(df3['Extracted_Value'], bw_adjust=1).get_lines()[2].get_data()
plt.close()

# Plot KDE
plt.figure(figsize=(7, 5))
plt.plot(kde_dss[0], kde_dss[1], label='DSS', color='blue')
plt.plot(kde_rg[0], kde_rg[1], label='Random Grid (RG)', color='red')
plt.plot(kde_ru[0], kde_ru[1], label='Random Uniform (RU)', color='green')

plt.title('Perbandingan KDE dari Koordinat DSS, RG, and RU', fontsize=10)
plt.xlabel('Nilai Slope (° derajat)', fontsize=11)
plt.ylabel('Densitas Nilai', fontsize=11)
plt.legend(fontsize=10)
plt.grid(True)
#plt.xlim(0.1, 0.45)

plt.gca().xaxis.set_minor_locator(MultipleLocator(0.05))
plt.gca().yaxis.set_minor_locator(MultipleLocator(0.02))

plt.minorticks_on()

plt.gca().xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
plt.gca().yaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))

plt.gca().tick_params(axis='x', which='minor', color='black')
plt.gca().tick_params(axis='y', which='minor', color='black')

plt.savefig(f'slope KDE.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

"""# **Thermal Inertia Histogram**

## **Thermal Inertia Night**

### **Thermal Inertia Histogram - region 1**

----------------------------------------
"""

# Direktori File
df1 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_DSS_TI_night_1.xlsx')
df2 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_grid_TI_night_1.xlsx')
df3 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_uniform_TI_night_1.xlsx')

# Min, Max, Std
min_val1, max_val1, std_val1, ave_val1 = df1['Extracted_Value'].min(), df1['Extracted_Value'].max(), df1['Extracted_Value'].std(), df1['Extracted_Value'].mean()
min_val2, max_val2, std_val2, ave_val2 = df2['Extracted_Value'].min(), df2['Extracted_Value'].max(), df2['Extracted_Value'].std(), df2['Extracted_Value'].mean()
min_val3, max_val3, std_val3, ave_val3 = df3['Extracted_Value'].min(), df3['Extracted_Value'].max(), df3['Extracted_Value'].std(), df3['Extracted_Value'].mean()

#_______________________________________________________________________________________________________________________________________#

# Ubah titik ke koma
def indonesia_format_koma(num):
    return f"{num:,.3f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def indonesian_format(x, pos=None):
    return f"{x:,.0f}".replace(',', 'X').replace('.', ',').replace('X', '.')

# Ubah format min, max, std ke koma
min_val1, max_val1, std_val1, ave_val1 = indonesia_format_koma(min_val1), indonesia_format_koma(max_val1), indonesia_format_koma(std_val1), indonesia_format_koma(ave_val1)
min_val2, max_val2, std_val2, ave_val2 = indonesia_format_koma(min_val2), indonesia_format_koma(max_val2), indonesia_format_koma(std_val2), indonesia_format_koma(ave_val2)
min_val3, max_val3, std_val3, ave_val3 = indonesia_format_koma(min_val3), indonesia_format_koma(max_val3), indonesia_format_koma(std_val3), indonesia_format_koma(ave_val3)

#_______________________________________________________________________________________________________________________________________#

# SNS Plot
#sns.set(style="whitegrid")
fig, axes = plt.subplots(1, 3, figsize=(16, 6.5), sharey=True)

#_______________________________________________________________________________________________________________________________________#

# Hist
hist1 = sns.histplot(data=df1, x='Extracted_Value', bins=25, kde=True, color='blue',
                     ax=axes[0],
                     label=f'Min={min_val1}    Max={max_val1}    Std={std_val1}    Ave={ave_val1}')

hist2 = sns.histplot(data=df2, x='Extracted_Value', bins=20, kde=True, color='red',
                     ax=axes[1],
                     label=f'Min={min_val2}    Max={max_val2}    Std={std_val2}    Ave={ave_val2}')

hist3 = sns.histplot(data=df3, x='Extracted_Value', bins=20, kde=True, color='green',
                     ax=axes[2],
                     label=f'Min={min_val3}    Max={max_val3}    Std={std_val3}    Ave={ave_val3}')

max_y_val = max(max([p.get_height() for p in hist1.patches]),
                max([p.get_height() for p in hist2.patches]),
                max([p.get_height() for p in hist3.patches]))

# Set properti legenda
axes[0].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)
axes[1].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)
axes[2].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)

# Nampilin semua y-label
axes[0].tick_params(labelleft=True)
axes[1].tick_params(labelleft=True)
axes[2].tick_params(labelleft=True)

# Set y dari nilai tertinggi
axes[0].set_ylim(0, max_y_val + 5)
axes[1].set_ylim(0, max_y_val + 5)
axes[2].set_ylim(0, max_y_val + 5)

#_______________________________________________________________________________________________________________________________________#

# Histogram file 1
axes[0].set_title('Data dari Koordinat DSS', fontproperties=p_regular, fontsize=13)
axes[0].set_xlabel('Inersia Termal ($\mathrm{J} \, \mathrm{m}^{-2} \mathrm{K}^{-1} \mathrm{s}^{-1/2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[0].set_ylabel('Banyak data', fontproperties=p_semibold, fontsize=11, color="#44494a")

# Hitung jumlah per bin
for p in hist1.patches:
    height = p.get_height()
    if height > 0:
        axes[0].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[0].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))

#_______________________________________________________________________________________________________________________________________#

# Histogram file 2
axes[1].set_title('Data dari Koordinat Random Grid (RG)', fontproperties=p_regular, fontsize=13)
axes[1].set_xlabel('Inersia Termal ($\mathrm{J} \, \mathrm{m}^{-2} \mathrm{K}^{-1} \mathrm{s}^{-1/2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[1].set_ylabel('')

# Hitung jumlah per bin
for p in hist2.patches:
    height = p.get_height()
    if height > 0:
        axes[1].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[1].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[1].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

# Histogram file 3
axes[2].set_title('Data dari Koordinat Random Uniform (RU)', fontproperties=p_regular, fontsize=13)
axes[2].set_xlabel('Inersia Termal ($\mathrm{J} \, \mathrm{m}^{-2} \mathrm{K}^{-1} \mathrm{s}^{-1/2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[2].set_ylabel('')

# Hitung jumlah per bin
for p in hist3.patches:
    height = p.get_height()
    if height > 0:
        axes[2].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[2].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[2].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

axes[0].set_xlim(0, 130)
axes[1].set_xlim(30, 80)
axes[2].set_xlim(30, 80)

for ax in axes:
    ax.set_ylim(0, max_y_val + 5)
    ax.xaxis.set_minor_locator(AutoMinorLocator(4))
    ax.yaxis.set_minor_locator(AutoMinorLocator(4))
    ax.tick_params(axis='x', which='minor', length=4, color='black')
    ax.tick_params(axis='y', which='minor', length=4, color='black')

# Layout histogram
plt.suptitle(
    'Perbandingan Nilai Inersia Termal dari Ketiga Koordinat saat Malam Hari \nWilayah 1 - (Olympus Mons dan Amazonis Planitia)',
    y=1.05, fontproperties=p_semibold, fontsize=14)
plt.figtext(0.5, 0.94, '30°LU - 10°LS dan 140°BB - 170°BB', fontsize=12, ha='center', fontproperties=p_medium)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 1
box_x_start = axes[1].get_position().xmin-.057
box_x_end = axes[2].get_position().xmax+.095
box_y_start = axes[1].get_position().ymin+.01
box_y_end = axes[1].get_position().ymax+.01

rect = Rectangle(
    (box_x_start, box_y_start),
    box_x_end - box_x_start,
    box_y_end - box_y_start,
    linewidth=1.5,
    edgecolor='#f47478',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start + box_x_end) / 2
box_title_y = box_y_end + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 2
box_x_start2 = axes[0].get_position().xmin-.102
box_x_end2 = axes[0].get_position().xmax-.017
box_y_start2 = axes[0].get_position().ymin+.01
box_y_end2 = axes[0].get_position().ymax+.01

rect = Rectangle(
    (box_x_start2, box_y_start2),
    box_x_end2 - box_x_start2,
    box_y_end2 - box_y_start2,
    linewidth=1.5,
    edgecolor='#7474f8',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start2 + box_x_end2) / 2
box_title_y = box_y_end2 + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

plt.tight_layout()
plt.subplots_adjust(wspace=0.2)
plt.savefig(f'TI night 1.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

"""### **Thermal Inertia Histogram - region 2**

----------------------------------------
"""

# Direktori File
df1 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_DSS_TI_night_2.xlsx')
df2 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_grid_TI_night_2.xlsx')
df3 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_uniform_TI_night_2.xlsx')

# Min, Max, Std
min_val1, max_val1, std_val1, ave_val1 = df1['Extracted_Value'].min(), df1['Extracted_Value'].max(), df1['Extracted_Value'].std(), df1['Extracted_Value'].mean()
min_val2, max_val2, std_val2, ave_val2 = df2['Extracted_Value'].min(), df2['Extracted_Value'].max(), df2['Extracted_Value'].std(), df2['Extracted_Value'].mean()
min_val3, max_val3, std_val3, ave_val3 = df3['Extracted_Value'].min(), df3['Extracted_Value'].max(), df3['Extracted_Value'].std(), df3['Extracted_Value'].mean()

#_______________________________________________________________________________________________________________________________________#

# Ubah titik ke koma
def indonesia_format_koma(num):
    return f"{num:,.3f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def indonesian_format(x, pos=None):
    return f"{x:,.0f}".replace(',', 'X').replace('.', ',').replace('X', '.')

# Ubah format min, max, std ke koma
min_val1, max_val1, std_val1, ave_val1 = indonesia_format_koma(min_val1), indonesia_format_koma(max_val1), indonesia_format_koma(std_val1), indonesia_format_koma(ave_val1)
min_val2, max_val2, std_val2, ave_val2 = indonesia_format_koma(min_val2), indonesia_format_koma(max_val2), indonesia_format_koma(std_val2), indonesia_format_koma(ave_val2)
min_val3, max_val3, std_val3, ave_val3 = indonesia_format_koma(min_val3), indonesia_format_koma(max_val3), indonesia_format_koma(std_val3), indonesia_format_koma(ave_val3)

#_______________________________________________________________________________________________________________________________________#

# SNS Plot
#sns.set(style="whitegrid")
fig, axes = plt.subplots(1, 3, figsize=(16, 6.5), sharey=True)

#_______________________________________________________________________________________________________________________________________#

# Hist
hist1 = sns.histplot(data=df1, x='Extracted_Value', bins=25, kde=True, color='blue',
                     ax=axes[0],
                     label=f'Min={min_val1}    Max={max_val1}    Std={std_val1}    Ave={ave_val1}')

hist2 = sns.histplot(data=df2, x='Extracted_Value', bins=20, kde=True, color='red',
                     ax=axes[1],
                     label=f'Min={min_val2}    Max={max_val2}    Std={std_val2}    Ave={ave_val2}')

hist3 = sns.histplot(data=df3, x='Extracted_Value', bins=20, kde=True, color='green',
                     ax=axes[2],
                     label=f'Min={min_val3}    Max={max_val3}    Std={std_val3}    Ave={ave_val3}')

max_y_val = max(max([p.get_height() for p in hist1.patches]),
                max([p.get_height() for p in hist2.patches]),
                max([p.get_height() for p in hist3.patches]))

# Set properti legenda
axes[0].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)
axes[1].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)
axes[2].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)

# Nampilin semua y-label
axes[0].tick_params(labelleft=True)
axes[1].tick_params(labelleft=True)
axes[2].tick_params(labelleft=True)

# Set y dari nilai tertinggi
axes[0].set_ylim(0, max_y_val + 5)
axes[1].set_ylim(0, max_y_val + 5)
axes[2].set_ylim(0, max_y_val + 5)

#_______________________________________________________________________________________________________________________________________#

# Histogram file 1
axes[0].set_title('Data dari Koordinat DSS', fontproperties=p_regular, fontsize=13)
axes[0].set_xlabel('Inersia Termal ($\mathrm{J} \, \mathrm{m}^{-2} \mathrm{K}^{-1} \mathrm{s}^{-1/2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[0].set_ylabel('Banyak data', fontproperties=p_semibold, fontsize=11, color="#44494a")

# Hitung jumlah per bin
for p in hist1.patches:
    height = p.get_height()
    if height > 0:
        axes[0].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[0].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))

#_______________________________________________________________________________________________________________________________________#

# Histogram file 2
axes[1].set_title('Data dari Koordinat Random Grid (RG)', fontproperties=p_regular, fontsize=13)
axes[1].set_xlabel('Inersia Termal ($\mathrm{J} \, \mathrm{m}^{-2} \mathrm{K}^{-1} \mathrm{s}^{-1/2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[1].set_ylabel('')

# Hitung jumlah per bin
for p in hist2.patches:
    height = p.get_height()
    if height > 0:
        axes[1].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[1].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[1].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

# Histogram file 3
axes[2].set_title('Data dari Koordinat Random Uniform (RU)', fontproperties=p_regular, fontsize=13)
axes[2].set_xlabel('Inersia Termal ($\mathrm{J} \, \mathrm{m}^{-2} \mathrm{K}^{-1} \mathrm{s}^{-1/2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[2].set_ylabel('')

# Hitung jumlah per bin
for p in hist3.patches:
    height = p.get_height()
    if height > 0:
        axes[2].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[2].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[2].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

axes[0].set_xlim(100, 500)
axes[1].set_xlim(200, 350)
axes[2].set_xlim(200, 350)

for ax in axes:
    ax.set_ylim(0, max_y_val + 5)
    ax.xaxis.set_minor_locator(AutoMinorLocator(4))
    ax.yaxis.set_minor_locator(AutoMinorLocator(4))
    ax.tick_params(axis='x', which='minor', length=4, color='black')
    ax.tick_params(axis='y', which='minor', length=4, color='black')

# Layout histogram
plt.suptitle(
    'Perbandingan Nilai Inersia Termal dari Ketiga Koordinat saat Malam Hari \nWilayah 2 - (Arabia Terra, Chryse Planitia, dan Ares Valis)',
    y=1.05, fontproperties=p_semibold, fontsize=14)
plt.figtext(0.5, 0.94, '30°LU - 10°LS dan 10°BT - 50°BB', fontsize=12, ha='center', fontproperties=p_medium)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 1
box_x_start = axes[1].get_position().xmin-.057
box_x_end = axes[2].get_position().xmax+.090
box_y_start = axes[1].get_position().ymin+.01
box_y_end = axes[1].get_position().ymax+.01

rect = Rectangle(
    (box_x_start, box_y_start),
    box_x_end - box_x_start,
    box_y_end - box_y_start,
    linewidth=1.5,
    edgecolor='#f47478',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start + box_x_end) / 2
box_title_y = box_y_end + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 2
box_x_start2 = axes[0].get_position().xmin-.102
box_x_end2 = axes[0].get_position().xmax-.017
box_y_start2 = axes[0].get_position().ymin+.01
box_y_end2 = axes[0].get_position().ymax+.01

rect = Rectangle(
    (box_x_start2, box_y_start2),
    box_x_end2 - box_x_start2,
    box_y_end2 - box_y_start2,
    linewidth=1.5,
    edgecolor='#7474f8',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start2 + box_x_end2) / 2
box_title_y = box_y_end2 + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

plt.tight_layout()
plt.subplots_adjust(wspace=0.2)
plt.savefig(f'TI night 2.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

"""### **Thermal Inertia Histogram - region 3**

----------------------------------------
"""

# Direktori File
df1 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_DSS_TI_night_3.xlsx')
df2 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_grid_TI_night_3.xlsx')
df3 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_uniform_TI_night_3.xlsx')

# Min, Max, Std
min_val1, max_val1, std_val1, ave_val1 = df1['Extracted_Value'].min(), df1['Extracted_Value'].max(), df1['Extracted_Value'].std(), df1['Extracted_Value'].mean()
min_val2, max_val2, std_val2, ave_val2 = df2['Extracted_Value'].min(), df2['Extracted_Value'].max(), df2['Extracted_Value'].std(), df2['Extracted_Value'].mean()
min_val3, max_val3, std_val3, ave_val3 = df3['Extracted_Value'].min(), df3['Extracted_Value'].max(), df3['Extracted_Value'].std(), df3['Extracted_Value'].mean()

#_______________________________________________________________________________________________________________________________________#

# Ubah titik ke koma
def indonesia_format_koma(num):
    return f"{num:,.3f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def indonesian_format(x, pos=None):
    return f"{x:,.0f}".replace(',', 'X').replace('.', ',').replace('X', '.')

# Ubah format min, max, std ke koma
min_val1, max_val1, std_val1, ave_val1 = indonesia_format_koma(min_val1), indonesia_format_koma(max_val1), indonesia_format_koma(std_val1), indonesia_format_koma(ave_val1)
min_val2, max_val2, std_val2, ave_val2 = indonesia_format_koma(min_val2), indonesia_format_koma(max_val2), indonesia_format_koma(std_val2), indonesia_format_koma(ave_val2)
min_val3, max_val3, std_val3, ave_val3 = indonesia_format_koma(min_val3), indonesia_format_koma(max_val3), indonesia_format_koma(std_val3), indonesia_format_koma(ave_val3)

#_______________________________________________________________________________________________________________________________________#

# SNS Plot
#sns.set(style="whitegrid")
fig, axes = plt.subplots(1, 3, figsize=(16, 6.5), sharey=True)

#_______________________________________________________________________________________________________________________________________#

# Hist
hist1 = sns.histplot(data=df1, x='Extracted_Value', bins=25, kde=True, color='blue',
                     ax=axes[0],
                     label=f'Min={min_val1}    Max={max_val1}    Std={std_val1}    Ave={ave_val1}')

hist2 = sns.histplot(data=df2, x='Extracted_Value', bins='auto', kde=True, color='red',
                     ax=axes[1],
                     label=f'Min={min_val2}    Max={max_val2}    Std={std_val2}    Ave={ave_val2}')

hist3 = sns.histplot(data=df3, x='Extracted_Value', bins='auto', kde=True, color='green',
                     ax=axes[2],
                     label=f'Min={min_val3}    Max={max_val3}    Std={std_val3}    Ave={ave_val3}')

max_y_val = max(max([p.get_height() for p in hist1.patches]),
                max([p.get_height() for p in hist2.patches]),
                max([p.get_height() for p in hist3.patches]))

# Set properti legenda
axes[0].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)
axes[1].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)
axes[2].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)

# Nampilin semua y-label
axes[0].tick_params(labelleft=True)
axes[1].tick_params(labelleft=True)
axes[2].tick_params(labelleft=True)

# Set y dari nilai tertinggi
axes[0].set_ylim(0, max_y_val + 5)
axes[1].set_ylim(0, max_y_val + 5)
axes[2].set_ylim(0, max_y_val + 5)

#_______________________________________________________________________________________________________________________________________#

# Histogram file 1
axes[0].set_title('Data dari Koordinat DSS', fontproperties=p_regular, fontsize=13)
axes[0].set_xlabel('Inersia Termal ($\mathrm{J} \, \mathrm{m}^{-2} \mathrm{K}^{-1} \mathrm{s}^{-1/2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[0].set_ylabel('Banyak data', fontproperties=p_semibold, fontsize=11, color="#44494a")

# Hitung jumlah per bin
for p in hist1.patches:
    height = p.get_height()
    if height > 0:
        axes[0].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[0].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))

#_______________________________________________________________________________________________________________________________________#

# Histogram file 2
axes[1].set_title('Data dari Koordinat Random Grid (RG)', fontproperties=p_regular, fontsize=13)
axes[1].set_xlabel('Inersia Termal ($\mathrm{J} \, \mathrm{m}^{-2} \mathrm{K}^{-1} \mathrm{s}^{-1/2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[1].set_ylabel('')

# Hitung jumlah per bin
for p in hist2.patches:
    height = p.get_height()
    if height > 0:
        axes[1].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[1].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[1].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

# Histogram file 3
axes[2].set_title('Data dari Koordinat Random Uniform (RU)', fontproperties=p_regular, fontsize=13)
axes[2].set_xlabel('Inersia Termal ($\mathrm{J} \, \mathrm{m}^{-2} \mathrm{K}^{-1} \mathrm{s}^{-1/2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[2].set_ylabel('')

# Hitung jumlah per bin
for p in hist3.patches:
    height = p.get_height()
    if height > 0:
        axes[2].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[2].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[2].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

axes[0].set_xlim(0, 450)
axes[1].set_xlim(80, 350)
axes[2].set_xlim(80, 350)

for ax in axes:
    ax.set_ylim(0, max_y_val + 5)
    ax.xaxis.set_minor_locator(AutoMinorLocator(4))
    ax.yaxis.set_minor_locator(AutoMinorLocator(4))
    ax.tick_params(axis='x', which='minor', length=4, color='black')
    ax.tick_params(axis='y', which='minor', length=4, color='black')

# Layout histogram
plt.suptitle(
    'Perbandingan Nilai Inersia Termal dari Ketiga Koordinat saat Malam Hari \nWilayah 3 - (Tharsis, Elysium Planitia, Utopia Planitia, dan Syrtis Major)',
    y=1.05, fontproperties=p_semibold, fontsize=14)
plt.figtext(0.5, 0.94, '40°LU - 20°LS dan 60°BT - 180°BT', fontsize=12, ha='center', fontproperties=p_medium)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 1
box_x_start = axes[1].get_position().xmin-.057
box_x_end = axes[2].get_position().xmax+.095
box_y_start = axes[1].get_position().ymin+.01
box_y_end = axes[1].get_position().ymax+.01

rect = Rectangle(
    (box_x_start, box_y_start),
    box_x_end - box_x_start,
    box_y_end - box_y_start,
    linewidth=1.5,
    edgecolor='#f47478',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start + box_x_end) / 2
box_title_y = box_y_end + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 2
box_x_start2 = axes[0].get_position().xmin-.102
box_x_end2 = axes[0].get_position().xmax-.017
box_y_start2 = axes[0].get_position().ymin+.01
box_y_end2 = axes[0].get_position().ymax+.01

rect = Rectangle(
    (box_x_start2, box_y_start2),
    box_x_end2 - box_x_start2,
    box_y_end2 - box_y_start2,
    linewidth=1.5,
    edgecolor='#7474f8',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start2 + box_x_end2) / 2
box_title_y = box_y_end2 + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

plt.tight_layout()
plt.subplots_adjust(wspace=0.2)
plt.savefig(f'TI night 3.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

"""### **Thermal Inertia Histogram - All Regions**

----------------------------------------
"""

# Direktori File
df1 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Combine Result/combined_TI_night.xlsx')
df2 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Combine Result/combined_random_grid_TI_night.xlsx')
df3 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Combine Result/combined_random_uniform_TI_night.xlsx')

# Min, Max, Std
min_val1, max_val1, std_val1, ave_val1 = df1['Extracted_Value'].min(), df1['Extracted_Value'].max(), df1['Extracted_Value'].std(), df1['Extracted_Value'].mean()
min_val2, max_val2, std_val2, ave_val2 = df2['Extracted_Value'].min(), df2['Extracted_Value'].max(), df2['Extracted_Value'].std(), df2['Extracted_Value'].mean()
min_val3, max_val3, std_val3, ave_val3 = df3['Extracted_Value'].min(), df3['Extracted_Value'].max(), df3['Extracted_Value'].std(), df3['Extracted_Value'].mean()

#_______________________________________________________________________________________________________________________________________#

# Ubah titik ke koma
def indonesia_format_koma(num):
    return f"{num:,.3f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def indonesian_format(x, pos=None):
    return f"{x:,.0f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def indonesian_format2(x, pos=None):
    return f"{x:,.3f}".replace(',', 'X').replace('.', ',').replace('X', '.')

# Ubah format min, max, std ke koma
min_val1, max_val1, std_val1, ave_val1 = indonesia_format_koma(min_val1), indonesia_format_koma(max_val1), indonesia_format_koma(std_val1), indonesia_format_koma(ave_val1)
min_val2, max_val2, std_val2, ave_val2 = indonesia_format_koma(min_val2), indonesia_format_koma(max_val2), indonesia_format_koma(std_val2), indonesia_format_koma(ave_val2)
min_val3, max_val3, std_val3, ave_val3 = indonesia_format_koma(min_val3), indonesia_format_koma(max_val3), indonesia_format_koma(std_val3), indonesia_format_koma(ave_val3)

#_______________________________________________________________________________________________________________________________________#

# SNS Plot
#sns.set(style="whitegrid")
fig, axes = plt.subplots(1, 3, figsize=(16, 6.5), sharey=True)

#_______________________________________________________________________________________________________________________________________#

# Hist
hist1 = sns.histplot(data=df1, x='Extracted_Value', bins=25, kde=True, color='blue',
                     ax=axes[0],
                     label=f'Min={min_val1}    Max={max_val1}    Std={std_val1}    Ave={ave_val1}')

hist2 = sns.histplot(data=df2, x='Extracted_Value', bins='auto', kde=True, color='red',
                     ax=axes[1],
                     label=f'Min={min_val2}    Max={max_val2}    Std={std_val2}    Ave={ave_val2}')

hist3 = sns.histplot(data=df3, x='Extracted_Value', bins='auto', kde=True, color='green',
                     ax=axes[2],
                     label=f'Min={min_val3}    Max={max_val3}    Std={std_val3}    Ave={ave_val3}')

max_y_val = max(max([p.get_height() for p in hist1.patches]),
                max([p.get_height() for p in hist2.patches]),
                max([p.get_height() for p in hist3.patches]))

# Set properti legenda
axes[0].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)
axes[1].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)
axes[2].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)

# Nampilin semua y-label
axes[0].tick_params(labelleft=True)
axes[1].tick_params(labelleft=True)
axes[2].tick_params(labelleft=True)

# Set y dari nilai tertinggi
axes[0].set_ylim(0, max_y_val + 5)
axes[1].set_ylim(0, max_y_val + 5)
axes[2].set_ylim(0, max_y_val + 5)

#_______________________________________________________________________________________________________________________________________#

# Histogram file 1
axes[0].set_title('Data dari Koordinat DSS', fontproperties=p_regular, fontsize=13)
axes[0].set_xlabel('Inersia Termal ($\mathrm{J} \, \mathrm{m}^{-2} \mathrm{K}^{-1} \mathrm{s}^{-1/2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[0].set_ylabel('Banyak data', fontproperties=p_semibold, fontsize=11, color="#44494a")

# Hitung jumlah per bin
for p in hist1.patches:
    height = p.get_height()
    if height > 0:
        axes[0].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[0].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))

#_______________________________________________________________________________________________________________________________________#

# Histogram file 2
axes[1].set_title('Data dari Koordinat Random Grid (RG)', fontproperties=p_regular, fontsize=13)
axes[1].set_xlabel('Inersia Termal ($\mathrm{J} \, \mathrm{m}^{-2} \mathrm{K}^{-1} \mathrm{s}^{-1/2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[1].set_ylabel('')

# Hitung jumlah per bin
for p in hist2.patches:
    height = p.get_height()
    if height > 0:
        axes[1].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[1].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[1].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

# Histogram file 3
axes[2].set_title('Data dari Koordinat Random Uniform (RU)', fontproperties=p_regular, fontsize=13)
axes[2].set_xlabel('Inersia Termal ($\mathrm{J} \, \mathrm{m}^{-2} \mathrm{K}^{-1} \mathrm{s}^{-1/2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[2].set_ylabel('')

# Hitung jumlah per bin
for p in hist3.patches:
    height = p.get_height()
    if height > 0:
        axes[2].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[2].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[2].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

axes[0].set_xlim(0, 500)
axes[1].set_xlim(0, 400)
axes[2].set_xlim(0, 400)

for ax in axes:
    ax.set_ylim(0, max_y_val + 5)
    ax.xaxis.set_minor_locator(AutoMinorLocator(4))
    ax.yaxis.set_minor_locator(AutoMinorLocator(4))
    ax.tick_params(axis='x', which='minor', length=4, color='black')
    ax.tick_params(axis='y', which='minor', length=4, color='black')

# Layout histogram
plt.suptitle(
    'Perbandingan Nilai Inersia Termal dari Ketiga Koordinat saat Malam Hari \nGabungan Wilayah 1, 2, dan 3',
    y=1.05, fontproperties=p_semibold, fontsize=14)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 1
box_x_start = axes[1].get_position().xmin-.057
box_x_end = axes[2].get_position().xmax+.095
box_y_start = axes[1].get_position().ymin+.01
box_y_end = axes[1].get_position().ymax+.01

rect = Rectangle(
    (box_x_start, box_y_start),
    box_x_end - box_x_start,
    box_y_end - box_y_start,
    linewidth=1.5,
    edgecolor='#f47478',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start + box_x_end) / 2
box_title_y = box_y_end + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 2
box_x_start2 = axes[0].get_position().xmin-.102
box_x_end2 = axes[0].get_position().xmax-.017
box_y_start2 = axes[0].get_position().ymin+.01
box_y_end2 = axes[0].get_position().ymax+.01

rect = Rectangle(
    (box_x_start2, box_y_start2),
    box_x_end2 - box_x_start2,
    box_y_end2 - box_y_start2,
    linewidth=1.5,
    edgecolor='#7474f8',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start2 + box_x_end2) / 2
box_title_y = box_y_end2 + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

plt.tight_layout()
plt.subplots_adjust(wspace=0.2)
plt.savefig(f'TI night seluruh.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

#_______________________________________________________________________________________________________________________________________#
print('')

# Ekstrak KDE
kde_dss = sns.kdeplot(df1['Extracted_Value'], bw_adjust=1).get_lines()[0].get_data()
kde_rg = sns.kdeplot(df2['Extracted_Value'], bw_adjust=1).get_lines()[1].get_data()
kde_ru = sns.kdeplot(df3['Extracted_Value'], bw_adjust=1).get_lines()[2].get_data()
plt.close()

# Plot KDE
plt.figure(figsize=(7, 5))
plt.plot(kde_dss[0], kde_dss[1], label='DSS', color='blue')
plt.plot(kde_rg[0], kde_rg[1], label='Random Grid (RG)', color='red')
plt.plot(kde_ru[0], kde_ru[1], label='Random Uniform (RU)', color='green')

plt.title('Perbandingan KDE dari Koordinat DSS, RG, and RU', fontsize=10)
plt.xlabel(r'Inersia Termal ($\mathrm{J} \, \mathrm{m}^{-2} \mathrm{K}^{-1} \mathrm{s}^{-1/2}$)', fontsize=11)
plt.ylabel('Densitas', fontsize=11)
plt.legend(fontsize=10)
plt.grid(True)
#plt.xlim(0.1, 600)

plt.gca().xaxis.set_minor_locator(MultipleLocator(0.05))
plt.gca().yaxis.set_minor_locator(MultipleLocator(0.02))

plt.minorticks_on()

plt.gca().xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
plt.gca().yaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format2))

plt.gca().tick_params(axis='x', which='minor', color='black')
plt.gca().tick_params(axis='y', which='minor', color='black')

plt.savefig(f'TI night KDE.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

"""## **Thermal Inertia Day**

### **Thermal Inertia Histogram - region 1**

----------------------------------------
"""

# Direktori File
df1 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_DSS_TI_day_1.xlsx')
df2 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_grid_TI_day_1.xlsx')
df3 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_uniform_TI_day_1.xlsx')

# Min, Max, Std
min_val1, max_val1, std_val1, ave_val1 = df1['Extracted_Value'].min(), df1['Extracted_Value'].max(), df1['Extracted_Value'].std(), df1['Extracted_Value'].mean()
min_val2, max_val2, std_val2, ave_val2 = df2['Extracted_Value'].min(), df2['Extracted_Value'].max(), df2['Extracted_Value'].std(), df2['Extracted_Value'].mean()
min_val3, max_val3, std_val3, ave_val3 = df3['Extracted_Value'].min(), df3['Extracted_Value'].max(), df3['Extracted_Value'].std(), df3['Extracted_Value'].mean()

#_______________________________________________________________________________________________________________________________________#

# Ubah titik ke koma
def indonesia_format_koma(num):
    return f"{num:,.3f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def indonesian_format(x, pos=None):
    return f"{x:,.0f}".replace(',', 'X').replace('.', ',').replace('X', '.')

# Ubah format min, max, std ke koma
min_val1, max_val1, std_val1, ave_val1 = indonesia_format_koma(min_val1), indonesia_format_koma(max_val1), indonesia_format_koma(std_val1), indonesia_format_koma(ave_val1)
min_val2, max_val2, std_val2, ave_val2 = indonesia_format_koma(min_val2), indonesia_format_koma(max_val2), indonesia_format_koma(std_val2), indonesia_format_koma(ave_val2)
min_val3, max_val3, std_val3, ave_val3 = indonesia_format_koma(min_val3), indonesia_format_koma(max_val3), indonesia_format_koma(std_val3), indonesia_format_koma(ave_val3)

#_______________________________________________________________________________________________________________________________________#

# SNS Plot
#sns.set(style="whitegrid")
fig, axes = plt.subplots(1, 3, figsize=(16, 6.5), sharey=True)

#_______________________________________________________________________________________________________________________________________#

# Hist
hist1 = sns.histplot(data=df1, x='Extracted_Value', bins=40, kde=True, color='blue',
                     ax=axes[0],
                     label=f'Min={min_val1}    Max={max_val1}    Std={std_val1}    Ave={ave_val1}')

hist2 = sns.histplot(data=df2, x='Extracted_Value', bins=20, kde=True, color='red',
                     ax=axes[1],
                     label=f'Min={min_val2}    Max={max_val2}    Std={std_val2}    Ave={ave_val2}')

hist3 = sns.histplot(data=df3, x='Extracted_Value', bins=25, kde=True, color='green',
                     ax=axes[2],
                     label=f'Min={min_val3}    Max={max_val3}    Std={std_val3}    Ave={ave_val3}')

max_y_val = max(max([p.get_height() for p in hist1.patches]),
                max([p.get_height() for p in hist2.patches]),
                max([p.get_height() for p in hist3.patches]))

# Set properti legenda
axes[0].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)
axes[1].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)
axes[2].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)

# Nampilin semua y-label
axes[0].tick_params(labelleft=True)
axes[1].tick_params(labelleft=True)
axes[2].tick_params(labelleft=True)

# Set y dari nilai tertinggi
axes[0].set_ylim(0, max_y_val + 5)
axes[1].set_ylim(0, max_y_val + 5)
axes[2].set_ylim(0, max_y_val + 5)

#_______________________________________________________________________________________________________________________________________#

# Histogram file 1
axes[0].set_title('Data dari Koordinat DSS', fontproperties=p_regular, fontsize=13)
axes[0].set_xlabel('Inersia Termal ($\mathrm{J} \, \mathrm{m}^{-2} \mathrm{K}^{-1} \mathrm{s}^{-1/2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[0].set_ylabel('Banyak data', fontproperties=p_semibold, fontsize=11, color="#44494a")

# Hitung jumlah per bin
for p in hist1.patches:
    height = p.get_height()
    if height > 0:
        axes[0].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[0].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))

#_______________________________________________________________________________________________________________________________________#

# Histogram file 2
axes[1].set_title('Data dari Koordinat Random Grid (RG)', fontproperties=p_regular, fontsize=13)
axes[1].set_xlabel('Inersia Termal ($\mathrm{J} \, \mathrm{m}^{-2} \mathrm{K}^{-1} \mathrm{s}^{-1/2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[1].set_ylabel('')

# Hitung jumlah per bin
for p in hist2.patches:
    height = p.get_height()
    if height > 0:
        axes[1].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[1].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[1].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

# Histogram file 3
axes[2].set_title('Data dari Koordinat Random Uniform (RU)', fontproperties=p_regular, fontsize=13)
axes[2].set_xlabel('Inersia Termal ($\mathrm{J} \, \mathrm{m}^{-2} \mathrm{K}^{-1} \mathrm{s}^{-1/2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[2].set_ylabel('')

# Hitung jumlah per bin
for p in hist3.patches:
    height = p.get_height()
    if height > 0:
        axes[2].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[2].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[2].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

axes[0].set_xlim(0, 200)
axes[1].set_xlim(25, 200)
axes[2].set_xlim(25, 250)

for ax in axes:
    ax.set_ylim(0, max_y_val + 5)
    ax.xaxis.set_minor_locator(AutoMinorLocator(4))
    ax.yaxis.set_minor_locator(AutoMinorLocator(4))
    ax.tick_params(axis='x', which='minor', length=4, color='black')
    ax.tick_params(axis='y', which='minor', length=4, color='black')

# Layout histogram
plt.suptitle(
    'Perbandingan Nilai Inersia Termal dari Ketiga Koordinat saat Siang Hari \nWilayah 1 - (Olympus Mons dan Amazonis Planitia)',
    y=1.05, fontproperties=p_semibold, fontsize=14)
plt.figtext(0.5, 0.94, '30°LU - 10°LS dan 140°BB - 170°B', fontsize=12, ha='center', fontproperties=p_medium)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 1
box_x_start = axes[1].get_position().xmin-.057
box_x_end = axes[2].get_position().xmax+.095
box_y_start = axes[1].get_position().ymin+.01
box_y_end = axes[1].get_position().ymax+.01

rect = Rectangle(
    (box_x_start, box_y_start),
    box_x_end - box_x_start,
    box_y_end - box_y_start,
    linewidth=1.5,
    edgecolor='#f47478',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start + box_x_end) / 2
box_title_y = box_y_end + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 2
box_x_start2 = axes[0].get_position().xmin-.102
box_x_end2 = axes[0].get_position().xmax-.017
box_y_start2 = axes[0].get_position().ymin+.01
box_y_end2 = axes[0].get_position().ymax+.01

rect = Rectangle(
    (box_x_start2, box_y_start2),
    box_x_end2 - box_x_start2,
    box_y_end2 - box_y_start2,
    linewidth=1.5,
    edgecolor='#7474f8',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start2 + box_x_end2) / 2
box_title_y = box_y_end2 + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

plt.tight_layout()
plt.subplots_adjust(wspace=0.2)
plt.savefig(f'TI day 1.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

"""### **Thermal Inertia Histogram - region 2**

----------------------------------------
"""

# Direktori File
df1 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_DSS_TI_day_2.xlsx')
df2 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_grid_TI_day_2.xlsx')
df3 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_uniform_TI_day_2.xlsx')

# Min, Max, Std
min_val1, max_val1, std_val1, ave_val1 = df1['Extracted_Value'].min(), df1['Extracted_Value'].max(), df1['Extracted_Value'].std(), df1['Extracted_Value'].mean()
min_val2, max_val2, std_val2, ave_val2 = df2['Extracted_Value'].min(), df2['Extracted_Value'].max(), df2['Extracted_Value'].std(), df2['Extracted_Value'].mean()
min_val3, max_val3, std_val3, ave_val3 = df3['Extracted_Value'].min(), df3['Extracted_Value'].max(), df3['Extracted_Value'].std(), df3['Extracted_Value'].mean()

#_______________________________________________________________________________________________________________________________________#

# Ubah titik ke koma
def indonesia_format_koma(num):
    return f"{num:,.3f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def indonesian_format(x, pos=None):
    return f"{x:,.0f}".replace(',', 'X').replace('.', ',').replace('X', '.')

# Ubah format min, max, std ke koma
min_val1, max_val1, std_val1, ave_val1 = indonesia_format_koma(min_val1), indonesia_format_koma(max_val1), indonesia_format_koma(std_val1), indonesia_format_koma(ave_val1)
min_val2, max_val2, std_val2, ave_val2 = indonesia_format_koma(min_val2), indonesia_format_koma(max_val2), indonesia_format_koma(std_val2), indonesia_format_koma(ave_val2)
min_val3, max_val3, std_val3, ave_val3 = indonesia_format_koma(min_val3), indonesia_format_koma(max_val3), indonesia_format_koma(std_val3), indonesia_format_koma(ave_val3)

#_______________________________________________________________________________________________________________________________________#

# SNS Plot
#sns.set(style="whitegrid")
fig, axes = plt.subplots(1, 3, figsize=(16, 6.5), sharey=True)

#_______________________________________________________________________________________________________________________________________#

# Hist
hist1 = sns.histplot(data=df1, x='Extracted_Value', bins=25, kde=True, color='blue',
                     ax=axes[0],
                     label=f'Min={min_val1}    Max={max_val1}    Std={std_val1}    Ave={ave_val1}')

hist2 = sns.histplot(data=df2, x='Extracted_Value', bins=30, kde=True, color='red',
                     ax=axes[1],
                     label=f'Min={min_val2}    Max={max_val2}    Std={std_val2}    Ave={ave_val2}')

hist3 = sns.histplot(data=df3, x='Extracted_Value', bins=30, kde=True, color='green',
                     ax=axes[2],
                     label=f'Min={min_val3}    Max={max_val3}    Std={std_val3}    Ave={ave_val3}')

max_y_val = max(max([p.get_height() for p in hist1.patches]),
                max([p.get_height() for p in hist2.patches]),
                max([p.get_height() for p in hist3.patches]))

# Set properti legenda
axes[0].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)
axes[1].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)
axes[2].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)

# Nampilin semua y-label
axes[0].tick_params(labelleft=True)
axes[1].tick_params(labelleft=True)
axes[2].tick_params(labelleft=True)

# Set y dari nilai tertinggi
axes[0].set_ylim(0, max_y_val + 5)
axes[1].set_ylim(0, max_y_val + 5)
axes[2].set_ylim(0, max_y_val + 5)

#_______________________________________________________________________________________________________________________________________#

# Histogram file 1
axes[0].set_title('Data dari Koordinat DSS', fontproperties=p_regular, fontsize=13)
axes[0].set_xlabel('Inersia Termal ($\mathrm{J} \, \mathrm{m}^{-2} \mathrm{K}^{-1} \mathrm{s}^{-1/2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[0].set_ylabel('Banyak data', fontproperties=p_semibold, fontsize=11, color="#44494a")

# Hitung jumlah per bin
for p in hist1.patches:
    height = p.get_height()
    if height > 0:
        axes[0].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[0].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))

#_______________________________________________________________________________________________________________________________________#

# Histogram file 2
axes[1].set_title('Data dari Koordinat Random Grid (RG)', fontproperties=p_regular, fontsize=13)
axes[1].set_xlabel('Inersia Termal ($\mathrm{J} \, \mathrm{m}^{-2} \mathrm{K}^{-1} \mathrm{s}^{-1/2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[1].set_ylabel('')

# Hitung jumlah per bin
for p in hist2.patches:
    height = p.get_height()
    if height > 0:
        axes[1].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[1].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[1].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

# Histogram file 3
axes[2].set_title('Data dari Koordinat Random Uniform (RU)', fontproperties=p_regular, fontsize=13)
axes[2].set_xlabel('Inersia Termal ($\mathrm{J} \, \mathrm{m}^{-2} \mathrm{K}^{-1} \mathrm{s}^{-1/2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[2].set_ylabel('')

# Hitung jumlah per bin
for p in hist3.patches:
    height = p.get_height()
    if height > 0:
        axes[2].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[2].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[2].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

axes[0].set_xlim(120, 500)
axes[1].set_xlim(195, 340)
axes[2].set_xlim(175, 320)

for ax in axes:
    ax.set_ylim(0, max_y_val + 5)
    ax.xaxis.set_minor_locator(AutoMinorLocator(4))
    ax.yaxis.set_minor_locator(AutoMinorLocator(4))
    ax.tick_params(axis='x', which='minor', length=4, color='black')
    ax.tick_params(axis='y', which='minor', length=4, color='black')

# Layout histogram
plt.suptitle(
    'Perbandingan Nilai Inersia Termal dari Ketiga Koordinat saat Siang Hari \nWilayah 2 - (Arabia Terra, Chryse Planitia, dan Ares Valis)',
    y=1.05, fontproperties=p_semibold, fontsize=14)
plt.figtext(0.5, 0.94, '30°LU - 10°LS dan 10°BT - 50°BB', fontsize=12, ha='center', fontproperties=p_medium)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 1
box_x_start = axes[1].get_position().xmin-.057
box_x_end = axes[2].get_position().xmax+.095
box_y_start = axes[1].get_position().ymin+.01
box_y_end = axes[1].get_position().ymax+.01

rect = Rectangle(
    (box_x_start, box_y_start),
    box_x_end - box_x_start,
    box_y_end - box_y_start,
    linewidth=1.5,
    edgecolor='#f47478',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start + box_x_end) / 2
box_title_y = box_y_end + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 2
box_x_start2 = axes[0].get_position().xmin-.102
box_x_end2 = axes[0].get_position().xmax-.017
box_y_start2 = axes[0].get_position().ymin+.01
box_y_end2 = axes[0].get_position().ymax+.01

rect = Rectangle(
    (box_x_start2, box_y_start2),
    box_x_end2 - box_x_start2,
    box_y_end2 - box_y_start2,
    linewidth=1.5,
    edgecolor='#7474f8',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start2 + box_x_end2) / 2
box_title_y = box_y_end2 + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

plt.tight_layout()
plt.subplots_adjust(wspace=0.2)
plt.savefig(f'TI day 2.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

"""### **Thermal Inertia Histogram - region 3**

----------------------------------------
"""

# Direktori File
df1 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_DSS_TI_day_3.xlsx')
df2 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_grid_TI_day_3.xlsx')
df3 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Result/average_random_uniform_TI_day_3.xlsx')

# Min, Max, Std
min_val1, max_val1, std_val1, ave_val1 = df1['Extracted_Value'].min(), df1['Extracted_Value'].max(), df1['Extracted_Value'].std(), df1['Extracted_Value'].mean()
min_val2, max_val2, std_val2, ave_val2 = df2['Extracted_Value'].min(), df2['Extracted_Value'].max(), df2['Extracted_Value'].std(), df2['Extracted_Value'].mean()
min_val3, max_val3, std_val3, ave_val3 = df3['Extracted_Value'].min(), df3['Extracted_Value'].max(), df3['Extracted_Value'].std(), df3['Extracted_Value'].mean()

#_______________________________________________________________________________________________________________________________________#

# Ubah titik ke koma
def indonesia_format_koma(num):
    return f"{num:,.3f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def indonesian_format(x, pos=None):
    return f"{x:,.0f}".replace(',', 'X').replace('.', ',').replace('X', '.')

# Ubah format min, max, std ke koma
min_val1, max_val1, std_val1, ave_val1 = indonesia_format_koma(min_val1), indonesia_format_koma(max_val1), indonesia_format_koma(std_val1), indonesia_format_koma(ave_val1)
min_val2, max_val2, std_val2, ave_val2 = indonesia_format_koma(min_val2), indonesia_format_koma(max_val2), indonesia_format_koma(std_val2), indonesia_format_koma(ave_val2)
min_val3, max_val3, std_val3, ave_val3 = indonesia_format_koma(min_val3), indonesia_format_koma(max_val3), indonesia_format_koma(std_val3), indonesia_format_koma(ave_val3)

#_______________________________________________________________________________________________________________________________________#

# SNS Plot
#sns.set(style="whitegrid")
fig, axes = plt.subplots(1, 3, figsize=(16, 6.5), sharey=True)

#_______________________________________________________________________________________________________________________________________#

# Hist
hist1 = sns.histplot(data=df1, x='Extracted_Value', bins=25, kde=True, color='blue',
                     ax=axes[0],
                     label=f'Min={min_val1}    Max={max_val1}    Std={std_val1}    Ave={ave_val1}')

hist2 = sns.histplot(data=df2, x='Extracted_Value', bins=25, kde=True, color='red',
                     ax=axes[1],
                     label=f'Min={min_val2}    Max={max_val2}    Std={std_val2}    Ave={ave_val2}')

hist3 = sns.histplot(data=df3, x='Extracted_Value', bins=25, kde=True, color='green',
                     ax=axes[2],
                     label=f'Min={min_val3}    Max={max_val3}    Std={std_val3}    Ave={ave_val3}')

max_y_val = max(max([p.get_height() for p in hist1.patches]),
                max([p.get_height() for p in hist2.patches]),
                max([p.get_height() for p in hist3.patches]))

# Set properti legenda
axes[0].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)
axes[1].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)
axes[2].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)

# Nampilin semua y-label
axes[0].tick_params(labelleft=True)
axes[1].tick_params(labelleft=True)
axes[2].tick_params(labelleft=True)

# Set y dari nilai tertinggi
axes[0].set_ylim(0, max_y_val + 5)
axes[1].set_ylim(0, max_y_val + 5)
axes[2].set_ylim(0, max_y_val + 5)

#_______________________________________________________________________________________________________________________________________#

# Histogram file 1
axes[0].set_title('Data dari Koordinat DSS', fontproperties=p_regular, fontsize=13)
axes[0].set_xlabel('Inersia Termal ($\mathrm{J} \, \mathrm{m}^{-2} \mathrm{K}^{-1} \mathrm{s}^{-1/2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[0].set_ylabel('Banyak data', fontproperties=p_semibold, fontsize=11, color="#44494a")

# Hitung jumlah per bin
for p in hist1.patches:
    height = p.get_height()
    if height > 0:
        axes[0].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[0].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))

#_______________________________________________________________________________________________________________________________________#

# Histogram file 2
axes[1].set_title('Data dari Koordinat Random Grid (RG)', fontproperties=p_regular, fontsize=13)
axes[1].set_xlabel('Inersia Termal ($\mathrm{J} \, \mathrm{m}^{-2} \mathrm{K}^{-1} \mathrm{s}^{-1/2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[1].set_ylabel('')

# Hitung jumlah per bin
for p in hist2.patches:
    height = p.get_height()
    if height > 0:
        axes[1].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[1].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[1].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

# Histogram file 3
axes[2].set_title('Data dari Koordinat Random Uniform (RU)', fontproperties=p_regular, fontsize=13)
axes[2].set_xlabel('Inersia Termal ($\mathrm{J} \, \mathrm{m}^{-2} \mathrm{K}^{-1} \mathrm{s}^{-1/2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[2].set_ylabel('')

# Hitung jumlah per bin
for p in hist3.patches:
    height = p.get_height()
    if height > 0:
        axes[2].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[2].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[2].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

axes[0].set_xlim(0, 450)
axes[1].set_xlim(75, 380)
axes[2].set_xlim(75, 350)

for ax in axes:
    ax.set_ylim(0, max_y_val + 5)
    ax.xaxis.set_minor_locator(AutoMinorLocator(4))
    ax.yaxis.set_minor_locator(AutoMinorLocator(4))
    ax.tick_params(axis='x', which='minor', length=4, color='black')
    ax.tick_params(axis='y', which='minor', length=4, color='black')

# Layout histogram
plt.suptitle(
    'Perbandingan Nilai Inersia Termal dari Ketiga Koordinat saat Siang Hari \nWilayah 3 - (Tharsis, Elysium Planitia, Utopia Planitia, dan Syrtis Major)',
    y=1.05, fontproperties=p_semibold, fontsize=14)
plt.figtext(0.5, 0.94, '40°LU - 20°LS dan 60°BT - 180°BT', fontsize=12, ha='center', fontproperties=p_medium)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 1
box_x_start = axes[1].get_position().xmin-.057
box_x_end = axes[2].get_position().xmax+.095
box_y_start = axes[1].get_position().ymin+.01
box_y_end = axes[1].get_position().ymax+.01

rect = Rectangle(
    (box_x_start, box_y_start),
    box_x_end - box_x_start,
    box_y_end - box_y_start,
    linewidth=1.5,
    edgecolor='#f47478',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start + box_x_end) / 2
box_title_y = box_y_end + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 2
box_x_start2 = axes[0].get_position().xmin-.102
box_x_end2 = axes[0].get_position().xmax-.017
box_y_start2 = axes[0].get_position().ymin+.01
box_y_end2 = axes[0].get_position().ymax+.01

rect = Rectangle(
    (box_x_start2, box_y_start2),
    box_x_end2 - box_x_start2,
    box_y_end2 - box_y_start2,
    linewidth=1.5,
    edgecolor='#7474f8',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start2 + box_x_end2) / 2
box_title_y = box_y_end2 + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

plt.tight_layout()
plt.subplots_adjust(wspace=0.2)
plt.savefig(f'TI day 3.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

"""### **Thermal Inertia Histogram - All Regions**

----------------------------------------
"""

# Direktori File
df1 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Combine Result/combined_TI_day.xlsx')
df2 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Combine Result/combined_random_grid_TI_day.xlsx')
df3 = pd.read_excel('/content/drive/Othercomputers/My laptop/Tugas Akhir/Data/Raw Data/a0. Rata-rata/Combine Result/combined_random_uniform_TI_day.xlsx')

# Min, Max, Std
min_val1, max_val1, std_val1, ave_val1 = df1['Extracted_Value'].min(), df1['Extracted_Value'].max(), df1['Extracted_Value'].std(), df1['Extracted_Value'].mean()
min_val2, max_val2, std_val2, ave_val2 = df2['Extracted_Value'].min(), df2['Extracted_Value'].max(), df2['Extracted_Value'].std(), df2['Extracted_Value'].mean()
min_val3, max_val3, std_val3, ave_val3 = df3['Extracted_Value'].min(), df3['Extracted_Value'].max(), df3['Extracted_Value'].std(), df3['Extracted_Value'].mean()

#_______________________________________________________________________________________________________________________________________#

# Ubah titik ke koma
def indonesia_format_koma(num):
    return f"{num:,.3f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def indonesian_format(x, pos=None):
    return f"{x:,.0f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def indonesian_format2(x, pos=None):
    return f"{x:,.3f}".replace(',', 'X').replace('.', ',').replace('X', '.')

# Ubah format min, max, std ke koma
min_val1, max_val1, std_val1, ave_val1 = indonesia_format_koma(min_val1), indonesia_format_koma(max_val1), indonesia_format_koma(std_val1), indonesia_format_koma(ave_val1)
min_val2, max_val2, std_val2, ave_val2 = indonesia_format_koma(min_val2), indonesia_format_koma(max_val2), indonesia_format_koma(std_val2), indonesia_format_koma(ave_val2)
min_val3, max_val3, std_val3, ave_val3 = indonesia_format_koma(min_val3), indonesia_format_koma(max_val3), indonesia_format_koma(std_val3), indonesia_format_koma(ave_val3)

#_______________________________________________________________________________________________________________________________________#

# SNS Plot
#sns.set(style="whitegrid")
fig, axes = plt.subplots(1, 3, figsize=(16, 6.5), sharey=True)

#_______________________________________________________________________________________________________________________________________#

# Hist
hist1 = sns.histplot(data=df1, x='Extracted_Value', bins=25, kde=True, color='blue',
                     ax=axes[0],
                     label=f'Min={min_val1}    Max={max_val1}    Std={std_val1}    Ave={ave_val1}')

hist2 = sns.histplot(data=df2, x='Extracted_Value', bins=25, kde=True, color='red',
                     ax=axes[1],
                     label=f'Min={min_val2}    Max={max_val2}    Std={std_val2}    Ave={ave_val2}')

hist3 = sns.histplot(data=df3, x='Extracted_Value', bins=25, kde=True, color='green',
                     ax=axes[2],
                     label=f'Min={min_val3}    Max={max_val3}    Std={std_val3}    Ave={ave_val3}')

max_y_val = max(max([p.get_height() for p in hist1.patches]),
                max([p.get_height() for p in hist2.patches]),
                max([p.get_height() for p in hist3.patches]))

# Set properti legenda
axes[0].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)
axes[1].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)
axes[2].legend(loc='center', bbox_to_anchor=(0.5, -0.22), handlelength=0, handletextpad=0, prop=p_regular)

# Nampilin semua y-label
axes[0].tick_params(labelleft=True)
axes[1].tick_params(labelleft=True)
axes[2].tick_params(labelleft=True)

# Set y dari nilai tertinggi
axes[0].set_ylim(0, max_y_val + 5)
axes[1].set_ylim(0, max_y_val + 5)
axes[2].set_ylim(0, max_y_val + 5)

#_______________________________________________________________________________________________________________________________________#

# Histogram file 1
axes[0].set_title('Data dari Koordinat DSS', fontproperties=p_regular, fontsize=13)
axes[0].set_xlabel('Inersia Termal ($\mathrm{J} \, \mathrm{m}^{-2} \mathrm{K}^{-1} \mathrm{s}^{-1/2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[0].set_ylabel('Banyak data', fontproperties=p_semibold, fontsize=11, color="#44494a")

# Hitung jumlah per bin
for p in hist1.patches:
    height = p.get_height()
    if height > 0:
        axes[0].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[0].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))

#_______________________________________________________________________________________________________________________________________#

# Histogram file 2
axes[1].set_title('Data dari Koordinat Random Grid (RG)', fontproperties=p_regular, fontsize=13)
axes[1].set_xlabel('Inersia Termal ($\mathrm{J} \, \mathrm{m}^{-2} \mathrm{K}^{-1} \mathrm{s}^{-1/2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[1].set_ylabel('')

# Hitung jumlah per bin
for p in hist2.patches:
    height = p.get_height()
    if height > 0:
        axes[1].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[1].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[1].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

# Histogram file 3
axes[2].set_title('Data dari Koordinat Random Uniform (RU)', fontproperties=p_regular, fontsize=13)
axes[2].set_xlabel('Inersia Termal ($\mathrm{J} \, \mathrm{m}^{-2} \mathrm{K}^{-1} \mathrm{s}^{-1/2}$)', fontproperties=p_semibold, fontsize=11, color="#44494a")
axes[2].set_ylabel('')

# Hitung jumlah per bin
for p in hist3.patches:
    height = p.get_height()
    if height > 0:
        axes[2].text(p.get_x() + p.get_width() / 2, height + 1, int(height),
                     ha='center', va='bottom', fontsize=10)

# Ubah x ke koma
axes[2].xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
axes[2].set_yticks(axes[0].get_yticks())

#_______________________________________________________________________________________________________________________________________#

axes[0].set_xlim(0, 450)
axes[1].set_xlim(25, 370)
axes[2].set_xlim(25, 370)

for ax in axes:
    ax.set_ylim(0, max_y_val + 5)
    ax.xaxis.set_minor_locator(AutoMinorLocator(4))
    ax.yaxis.set_minor_locator(AutoMinorLocator(4))
    ax.tick_params(axis='x', which='minor', length=4, color='black')
    ax.tick_params(axis='y', which='minor', length=4, color='black')

# Layout histogram
plt.suptitle(
    'Perbandingan Nilai Inersia Termal dari Ketiga Koordinat saat Siang Hari \nGabungan Wilayah 1, 2, dan 3',
    y=1.05, fontproperties=p_semibold, fontsize=14)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 1
box_x_start = axes[1].get_position().xmin-.057
box_x_end = axes[2].get_position().xmax+.095
box_y_start = axes[1].get_position().ymin+.01
box_y_end = axes[1].get_position().ymax+.01

rect = Rectangle(
    (box_x_start, box_y_start),
    box_x_end - box_x_start,
    box_y_end - box_y_start,
    linewidth=1.5,
    edgecolor='#f47478',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start + box_x_end) / 2
box_title_y = box_y_end + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

#_______________________________________________________________________________________________________________________________________#

# Box pemisah 2
box_x_start2 = axes[0].get_position().xmin-.102
box_x_end2 = axes[0].get_position().xmax-.017
box_y_start2 = axes[0].get_position().ymin+.01
box_y_end2 = axes[0].get_position().ymax+.01

rect = Rectangle(
    (box_x_start2, box_y_start2),
    box_x_end2 - box_x_start2,
    box_y_end2 - box_y_start2,
    linewidth=1.5,
    edgecolor='#7474f8',
    facecolor='none',
    transform=fig.transFigure,
    clip_on=False
)
fig.add_artist(rect)

# Box title
box_title_x = (box_x_start2 + box_x_end2) / 2
box_title_y = box_y_end2 + 0.01
fig.text(
    box_title_x, box_title_y,
    "Koordinat Acak",
    ha='center',
    va='bottom',
    fontsize=12,
    color='#262626',
    fontweight='bold'
)

plt.tight_layout()
plt.subplots_adjust(wspace=0.2)
plt.savefig(f'TI day seluruh.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()

#_______________________________________________________________________________________________________________________________________#
print('')

# Ekstrak KDE
kde_dss = sns.kdeplot(df1['Extracted_Value'], bw_adjust=1).get_lines()[0].get_data()
kde_rg = sns.kdeplot(df2['Extracted_Value'], bw_adjust=1).get_lines()[1].get_data()
kde_ru = sns.kdeplot(df3['Extracted_Value'], bw_adjust=1).get_lines()[2].get_data()
plt.close()

# Plot KDE
plt.figure(figsize=(7, 5))
plt.plot(kde_dss[0], kde_dss[1], label='DSS', color='blue')
plt.plot(kde_rg[0], kde_rg[1], label='Random Grid (RG)', color='red')
plt.plot(kde_ru[0], kde_ru[1], label='Random Uniform (RU)', color='green')

plt.title('Perbandingan KDE dari Koordinat DSS, RG, and RU', fontsize=10)
plt.xlabel(r'Inersia Termal ($\mathrm{J} \, \mathrm{m}^{-2} \mathrm{K}^{-1} \mathrm{s}^{-1/2}$)', fontsize=11)
plt.ylabel('Densitas', fontsize=11)
plt.legend(fontsize=10)
plt.grid(True)
#plt.xlim(0.1, 600)

plt.gca().xaxis.set_minor_locator(MultipleLocator(0.05))
plt.gca().yaxis.set_minor_locator(MultipleLocator(0.02))

plt.minorticks_on()

plt.gca().xaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format))
plt.gca().yaxis.set_major_formatter(mtick.FuncFormatter(indonesian_format2))

plt.gca().tick_params(axis='x', which='minor', color='black')
plt.gca().tick_params(axis='y', which='minor', color='black')

plt.savefig(f'TI day KDE.png', dpi=500, transparent=False, bbox_inches='tight', pad_inches=0.1)
plt.show()